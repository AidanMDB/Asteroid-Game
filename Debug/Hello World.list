
Hello World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005024  08005024  00009af8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005024  08005024  00009af8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005024  08005024  00009af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005024  08005024  00006024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005028  08005028  00006028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002af8  20000000  0800502c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a34  20002af8  08007b24  00009af8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000352c  08007b24  0000a52c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009af8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c7  00000000  00000000  00009b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c03  00000000  00000000  000164e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  000190f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af1  00000000  00000000  00019f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db8e  00000000  00000000  0001aa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dc4  00000000  00000000  000385d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a90b0  00000000  00000000  0004c39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f544b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000f5490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f8e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20002af8 	.word	0x20002af8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004e98 	.word	0x08004e98

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20002afc 	.word	0x20002afc
 8000100:	08004e98 	.word	0x08004e98

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <HAL_SPI_TxCpltCallback>:
static uint8_t lcd_dma_byte;
static volatile bool lcd_dma_ready = true;
static uint16_t LCD_HEIGHT;
static uint16_t LCD_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	lcd_dma_ready = true;
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <HAL_SPI_TxCpltCallback+0x24>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800023e:	2380      	movs	r3, #128	@ 0x80
 8000240:	015b      	lsls	r3, r3, #5
 8000242:	4805      	ldr	r0, [pc, #20]	@ (8000258 <HAL_SPI_TxCpltCallback+0x28>)
 8000244:	2201      	movs	r2, #1
 8000246:	0019      	movs	r1, r3
 8000248:	f002 f833 	bl	80022b2 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);			// flashes led to show data transfer
	//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000000 	.word	0x20000000
 8000258:	48000400 	.word	0x48000400

0800025c <LCD_get_height>:

/**
 * @brief returns the height of the LCD in its current orientation
 *
 * */
uint16_t LCD_get_height() {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	return LCD_HEIGHT;
 8000260:	4b02      	ldr	r3, [pc, #8]	@ (800026c <LCD_get_height+0x10>)
 8000262:	881b      	ldrh	r3, [r3, #0]
}
 8000264:	0018      	movs	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	20002b16 	.word	0x20002b16

08000270 <LCD_get_width>:

/**
 * @brief returns the width of the LCD in its current orientation
 *
 * */
uint16_t LCD_get_width() {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	return LCD_WIDTH;
 8000274:	4b02      	ldr	r3, [pc, #8]	@ (8000280 <LCD_get_width+0x10>)
 8000276:	881b      	ldrh	r3, [r3, #0]
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	20002b18 	.word	0x20002b18

08000284 <LCD_SPI_Init>:


/**
 * @brief Initialize the SPI and backlight for the LCD
 * */
void LCD_SPI_Init() {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	  MX_DMA_Init();
 8000288:	f000 fb12 	bl	80008b0 <MX_DMA_Init>
	  MX_SPI2_Init();
 800028c:	f000 ff74 	bl	8001178 <MX_SPI2_Init>

	  MX_TIM15_Init();
 8000290:	f001 f960 	bl	8001554 <MX_TIM15_Init>
	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <LCD_SPI_Init+0x28>)
 8000296:	2100      	movs	r1, #0
 8000298:	0018      	movs	r0, r3
 800029a:	f003 f947 	bl	800352c <HAL_TIM_PWM_Start>
	  htim15.Instance->CCR1 = 10000;
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <LCD_SPI_Init+0x28>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a03      	ldr	r2, [pc, #12]	@ (80002b0 <LCD_SPI_Init+0x2c>)
 80002a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002a6:	46c0      	nop			@ (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20003394 	.word	0x20003394
 80002b0:	00002710 	.word	0x00002710

080002b4 <LCD_Write_Command>:
/**
 * @brief write a commmand to LCD
 * @param command - command byte being sent
 *
 * */
void LCD_Write_Command(uint8_t command) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	701a      	strb	r2, [r3, #0]
	while(!lcd_dma_ready){};
 80002c0:	46c0      	nop			@ (mov r8, r8)
 80002c2:	4b13      	ldr	r3, [pc, #76]	@ (8000310 <LCD_Write_Command+0x5c>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2201      	movs	r2, #1
 80002ca:	4053      	eors	r3, r2
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1f7      	bne.n	80002c2 <LCD_Write_Command+0xe>
	lcd_dma_byte = command;
 80002d2:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <LCD_Write_Command+0x60>)
 80002d4:	1dfa      	adds	r2, r7, #7
 80002d6:	7812      	ldrb	r2, [r2, #0]
 80002d8:	701a      	strb	r2, [r3, #0]
	lcd_dma_ready = false;
 80002da:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <LCD_Write_Command+0x5c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80002e0:	2380      	movs	r3, #128	@ 0x80
 80002e2:	015b      	lsls	r3, r3, #5
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <LCD_Write_Command+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	0019      	movs	r1, r3
 80002ea:	f001 ffe2 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80002ee:	2390      	movs	r3, #144	@ 0x90
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	2200      	movs	r2, #0
 80002f4:	2101      	movs	r1, #1
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 ffdb 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, &lcd_dma_byte, 1);
 80002fc:	4905      	ldr	r1, [pc, #20]	@ (8000314 <LCD_Write_Command+0x60>)
 80002fe:	4b07      	ldr	r3, [pc, #28]	@ (800031c <LCD_Write_Command+0x68>)
 8000300:	2201      	movs	r2, #1
 8000302:	0018      	movs	r0, r3
 8000304:	f002 fdb4 	bl	8002e70 <HAL_SPI_Transmit_DMA>
}
 8000308:	46c0      	nop			@ (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000
 8000314:	20002b14 	.word	0x20002b14
 8000318:	48000400 	.word	0x48000400
 800031c:	200032e8 	.word	0x200032e8

08000320 <LCD_Write_Data>:
/**
 * @brief write a single byte of data to LCD
 * @param data - byte of data being sent
 *
 * */
void LCD_Write_Data(uint8_t data) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	0002      	movs	r2, r0
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	701a      	strb	r2, [r3, #0]
	while(!lcd_dma_ready){};
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	4b13      	ldr	r3, [pc, #76]	@ (800037c <LCD_Write_Data+0x5c>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2201      	movs	r2, #1
 8000336:	4053      	eors	r3, r2
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f7      	bne.n	800032e <LCD_Write_Data+0xe>
	lcd_dma_byte = data;
 800033e:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <LCD_Write_Data+0x60>)
 8000340:	1dfa      	adds	r2, r7, #7
 8000342:	7812      	ldrb	r2, [r2, #0]
 8000344:	701a      	strb	r2, [r3, #0]
	lcd_dma_ready = false;
 8000346:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <LCD_Write_Data+0x5c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	015b      	lsls	r3, r3, #5
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LCD_Write_Data+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	0019      	movs	r1, r3
 8000356:	f001 ffac 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800035a:	2390      	movs	r3, #144	@ 0x90
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	2201      	movs	r2, #1
 8000360:	2101      	movs	r1, #1
 8000362:	0018      	movs	r0, r3
 8000364:	f001 ffa5 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, &lcd_dma_byte, 1);
 8000368:	4905      	ldr	r1, [pc, #20]	@ (8000380 <LCD_Write_Data+0x60>)
 800036a:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <LCD_Write_Data+0x68>)
 800036c:	2201      	movs	r2, #1
 800036e:	0018      	movs	r0, r3
 8000370:	f002 fd7e 	bl	8002e70 <HAL_SPI_Transmit_DMA>
}
 8000374:	46c0      	nop			@ (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b002      	add	sp, #8
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000000 	.word	0x20000000
 8000380:	20002b14 	.word	0x20002b14
 8000384:	48000400 	.word	0x48000400
 8000388:	200032e8 	.word	0x200032e8

0800038c <LCD_write_pixel_data>:
 * @brief write an array of data to LCD
 * @param data_buffer - the array of data to be sent to LCD
 * @param size - the amount of data in bytes being sent
 *
 * */
void LCD_write_pixel_data(uint8_t* data_buffer, uint16_t size) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	000a      	movs	r2, r1
 8000396:	1cbb      	adds	r3, r7, #2
 8000398:	801a      	strh	r2, [r3, #0]
	while(!lcd_dma_ready) {}
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <LCD_write_pixel_data+0x58>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2201      	movs	r2, #1
 80003a4:	4053      	eors	r3, r2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1f7      	bne.n	800039c <LCD_write_pixel_data+0x10>
	//lcd_dma_byte = data;
	lcd_dma_ready = false;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <LCD_write_pixel_data+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80003b2:	2380      	movs	r3, #128	@ 0x80
 80003b4:	015b      	lsls	r3, r3, #5
 80003b6:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <LCD_write_pixel_data+0x5c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	0019      	movs	r1, r3
 80003bc:	f001 ff79 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80003c0:	2390      	movs	r3, #144	@ 0x90
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	2201      	movs	r2, #1
 80003c6:	2101      	movs	r1, #1
 80003c8:	0018      	movs	r0, r3
 80003ca:	f001 ff72 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, data_buffer, size);
 80003ce:	1cbb      	adds	r3, r7, #2
 80003d0:	881a      	ldrh	r2, [r3, #0]
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <LCD_write_pixel_data+0x60>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 fd4a 	bl	8002e70 <HAL_SPI_Transmit_DMA>
}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000000 	.word	0x20000000
 80003e8:	48000400 	.word	0x48000400
 80003ec:	200032e8 	.word	0x200032e8

080003f0 <LCD_Hardware_Reset>:

/**
 * @brief performs a hardware reset on the LCD display
 *
 */
void LCD_Hardware_Reset() {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80003f4:	2390      	movs	r3, #144	@ 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	2200      	movs	r2, #0
 80003fa:	2102      	movs	r1, #2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 ff58 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000402:	20c8      	movs	r0, #200	@ 0xc8
 8000404:	f001 fa2c 	bl	8001860 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	015b      	lsls	r3, r3, #5
 800040c:	480a      	ldr	r0, [pc, #40]	@ (8000438 <LCD_Hardware_Reset+0x48>)
 800040e:	2200      	movs	r2, #0
 8000410:	0019      	movs	r1, r3
 8000412:	f001 ff4e 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000416:	2064      	movs	r0, #100	@ 0x64
 8000418:	f001 fa22 	bl	8001860 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800041c:	2390      	movs	r3, #144	@ 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2201      	movs	r2, #1
 8000422:	2102      	movs	r1, #2
 8000424:	0018      	movs	r0, r3
 8000426:	f001 ff44 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800042a:	2064      	movs	r0, #100	@ 0x64
 800042c:	f001 fa18 	bl	8001860 <HAL_Delay>
}
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	48000400 	.word	0x48000400

0800043c <LCD_rotation>:
 * 		SCREEN_VERTICAL_SD_BOTTOM 	- vertical orientation with SD pins at the bottom
 * 		SCREEN_VERTICAL_SD_TOP		- vertical orientation with SD pins at the top
 * 		SCREEN_HORIZONTAL_SD_RIGHT	- horizontal orientation with SD pins to the right
 * 		SCREEN_HORIZONTAL_SD_LEFT	- horizontal orientation with SD pins to the left
 * */
void LCD_rotation(uint8_t rotation) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]

	LCD_Write_Command(SCREEN_ORIENTATION);
 8000448:	2036      	movs	r0, #54	@ 0x36
 800044a:	f7ff ff33 	bl	80002b4 <LCD_Write_Command>

	switch (rotation) {
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d028      	beq.n	80004a8 <LCD_rotation+0x6c>
 8000456:	dc32      	bgt.n	80004be <LCD_rotation+0x82>
 8000458:	2b02      	cmp	r3, #2
 800045a:	d01a      	beq.n	8000492 <LCD_rotation+0x56>
 800045c:	dc2f      	bgt.n	80004be <LCD_rotation+0x82>
 800045e:	2b00      	cmp	r3, #0
 8000460:	d00c      	beq.n	800047c <LCD_rotation+0x40>
 8000462:	2b01      	cmp	r3, #1
 8000464:	d12b      	bne.n	80004be <LCD_rotation+0x82>
		case SCREEN_VERTICAL_SD_BOTTOM:
			LCD_Write_Data(0x80|0x08);
 8000466:	2088      	movs	r0, #136	@ 0x88
 8000468:	f7ff ff5a 	bl	8000320 <LCD_Write_Data>
			LCD_HEIGHT = 320;
 800046c:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <LCD_rotation+0x8c>)
 800046e:	22a0      	movs	r2, #160	@ 0xa0
 8000470:	0052      	lsls	r2, r2, #1
 8000472:	801a      	strh	r2, [r3, #0]
			LCD_WIDTH = 240;
 8000474:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <LCD_rotation+0x90>)
 8000476:	22f0      	movs	r2, #240	@ 0xf0
 8000478:	801a      	strh	r2, [r3, #0]
			break;
 800047a:	e021      	b.n	80004c0 <LCD_rotation+0x84>
		case SCREEN_VERTICAL_SD_TOP:
			LCD_Write_Data(0x40|0x08);
 800047c:	2048      	movs	r0, #72	@ 0x48
 800047e:	f7ff ff4f 	bl	8000320 <LCD_Write_Data>
			LCD_HEIGHT = 320;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <LCD_rotation+0x8c>)
 8000484:	22a0      	movs	r2, #160	@ 0xa0
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	801a      	strh	r2, [r3, #0]
			LCD_WIDTH = 240;
 800048a:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <LCD_rotation+0x90>)
 800048c:	22f0      	movs	r2, #240	@ 0xf0
 800048e:	801a      	strh	r2, [r3, #0]
			break;
 8000490:	e016      	b.n	80004c0 <LCD_rotation+0x84>
		case SCREEN_HORIZONTAL_SD_RIGHT:
			LCD_Write_Data(0x80|0x08);
 8000492:	2088      	movs	r0, #136	@ 0x88
 8000494:	f7ff ff44 	bl	8000320 <LCD_Write_Data>
			LCD_HEIGHT = 240;
 8000498:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <LCD_rotation+0x8c>)
 800049a:	22f0      	movs	r2, #240	@ 0xf0
 800049c:	801a      	strh	r2, [r3, #0]
			LCD_WIDTH = 320;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <LCD_rotation+0x90>)
 80004a0:	22a0      	movs	r2, #160	@ 0xa0
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	801a      	strh	r2, [r3, #0]
			break;
 80004a6:	e00b      	b.n	80004c0 <LCD_rotation+0x84>
		case SCREEN_HORIZONTAL_SD_LEFT:
			LCD_Write_Data(0x80|0x08);
 80004a8:	2088      	movs	r0, #136	@ 0x88
 80004aa:	f7ff ff39 	bl	8000320 <LCD_Write_Data>
			LCD_HEIGHT = 240;
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <LCD_rotation+0x8c>)
 80004b0:	22f0      	movs	r2, #240	@ 0xf0
 80004b2:	801a      	strh	r2, [r3, #0]
			LCD_WIDTH = 320;
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <LCD_rotation+0x90>)
 80004b6:	22a0      	movs	r2, #160	@ 0xa0
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	801a      	strh	r2, [r3, #0]
			break;
 80004bc:	e000      	b.n	80004c0 <LCD_rotation+0x84>

		default:
			break;
 80004be:	46c0      	nop			@ (mov r8, r8)
	}
}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20002b16 	.word	0x20002b16
 80004cc:	20002b18 	.word	0x20002b18

080004d0 <LCD_Init>:

/**
 * @brief Initialization of LCD screen
 * */
void LCD_Init() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80004d4:	2390      	movs	r3, #144	@ 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2201      	movs	r2, #1
 80004da:	2102      	movs	r1, #2
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fee8 	bl	80022b2 <HAL_GPIO_WritePin>
	LCD_SPI_Init();
 80004e2:	f7ff fecf 	bl	8000284 <LCD_SPI_Init>
	LCD_Hardware_Reset();
 80004e6:	f7ff ff83 	bl	80003f0 <LCD_Hardware_Reset>

	// software reset
	LCD_Write_Command(LCD_SOFTWARE_RST);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f7ff fee2 	bl	80002b4 <LCD_Write_Command>
	HAL_Delay(10);
 80004f0:	200a      	movs	r0, #10
 80004f2:	f001 f9b5 	bl	8001860 <HAL_Delay>


	// power control A
	LCD_Write_Command(0xCB);
 80004f6:	20cb      	movs	r0, #203	@ 0xcb
 80004f8:	f7ff fedc 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x39);
 80004fc:	2039      	movs	r0, #57	@ 0x39
 80004fe:	f7ff ff0f 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 8000502:	202c      	movs	r0, #44	@ 0x2c
 8000504:	f7ff ff0c 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff ff09 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x34);
 800050e:	2034      	movs	r0, #52	@ 0x34
 8000510:	f7ff ff06 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x02);
 8000514:	2002      	movs	r0, #2
 8000516:	f7ff ff03 	bl	8000320 <LCD_Write_Data>

	//POWER CONTROL B
	LCD_Write_Command(0xCF);
 800051a:	20cf      	movs	r0, #207	@ 0xcf
 800051c:	f7ff feca 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff fefd 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0xC1);
 8000526:	20c1      	movs	r0, #193	@ 0xc1
 8000528:	f7ff fefa 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x30);
 800052c:	2030      	movs	r0, #48	@ 0x30
 800052e:	f7ff fef7 	bl	8000320 <LCD_Write_Data>

	//DRIVER TIMING CONTROL A
	LCD_Write_Command(0xE8);
 8000532:	20e8      	movs	r0, #232	@ 0xe8
 8000534:	f7ff febe 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x85);
 8000538:	2085      	movs	r0, #133	@ 0x85
 800053a:	f7ff fef1 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff feee 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x78);
 8000544:	2078      	movs	r0, #120	@ 0x78
 8000546:	f7ff feeb 	bl	8000320 <LCD_Write_Data>

	//DRIVER TIMING CONTROL B
	LCD_Write_Command(0xEA);
 800054a:	20ea      	movs	r0, #234	@ 0xea
 800054c:	f7ff feb2 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fee5 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff fee2 	bl	8000320 <LCD_Write_Data>

	//POWER ON SEQUENCE CONTROL
	LCD_Write_Command(0xED);
 800055c:	20ed      	movs	r0, #237	@ 0xed
 800055e:	f7ff fea9 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x64);
 8000562:	2064      	movs	r0, #100	@ 0x64
 8000564:	f7ff fedc 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8000568:	2003      	movs	r0, #3
 800056a:	f7ff fed9 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x12);
 800056e:	2012      	movs	r0, #18
 8000570:	f7ff fed6 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8000574:	2081      	movs	r0, #129	@ 0x81
 8000576:	f7ff fed3 	bl	8000320 <LCD_Write_Data>

	//PUMP RATIO CONTROL
	LCD_Write_Command(0xF7);
 800057a:	20f7      	movs	r0, #247	@ 0xf7
 800057c:	f7ff fe9a 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x20);
 8000580:	2020      	movs	r0, #32
 8000582:	f7ff fecd 	bl	8000320 <LCD_Write_Data>

	//POWER CONTROL,VRH[5:0]
	LCD_Write_Command(0xC0);
 8000586:	20c0      	movs	r0, #192	@ 0xc0
 8000588:	f7ff fe94 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x23);
 800058c:	2023      	movs	r0, #35	@ 0x23
 800058e:	f7ff fec7 	bl	8000320 <LCD_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_Write_Command(0xC1);
 8000592:	20c1      	movs	r0, #193	@ 0xc1
 8000594:	f7ff fe8e 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x10);
 8000598:	2010      	movs	r0, #16
 800059a:	f7ff fec1 	bl	8000320 <LCD_Write_Data>

	//VCM CONTROL
	LCD_Write_Command(0xC5);
 800059e:	20c5      	movs	r0, #197	@ 0xc5
 80005a0:	f7ff fe88 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x3E);
 80005a4:	203e      	movs	r0, #62	@ 0x3e
 80005a6:	f7ff febb 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x28);
 80005aa:	2028      	movs	r0, #40	@ 0x28
 80005ac:	f7ff feb8 	bl	8000320 <LCD_Write_Data>

	//VCM CONTROL 2
	LCD_Write_Command(0xC7);
 80005b0:	20c7      	movs	r0, #199	@ 0xc7
 80005b2:	f7ff fe7f 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x86);
 80005b6:	2086      	movs	r0, #134	@ 0x86
 80005b8:	f7ff feb2 	bl	8000320 <LCD_Write_Data>

	//MEMORY ACCESS CONTROL
	LCD_Write_Command(0x36);
 80005bc:	2036      	movs	r0, #54	@ 0x36
 80005be:	f7ff fe79 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x48);
 80005c2:	2048      	movs	r0, #72	@ 0x48
 80005c4:	f7ff feac 	bl	8000320 <LCD_Write_Data>

	//PIXEL FORMAT
	LCD_Write_Command(0x3A);
 80005c8:	203a      	movs	r0, #58	@ 0x3a
 80005ca:	f7ff fe73 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x55);
 80005ce:	2055      	movs	r0, #85	@ 0x55
 80005d0:	f7ff fea6 	bl	8000320 <LCD_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_Write_Command(0xB1);
 80005d4:	20b1      	movs	r0, #177	@ 0xb1
 80005d6:	f7ff fe6d 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff fea0 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x18);
 80005e0:	2018      	movs	r0, #24
 80005e2:	f7ff fe9d 	bl	8000320 <LCD_Write_Data>

	//DISPLAY FUNCTION CONTROL
	LCD_Write_Command(0xB6);
 80005e6:	20b6      	movs	r0, #182	@ 0xb6
 80005e8:	f7ff fe64 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x08);
 80005ec:	2008      	movs	r0, #8
 80005ee:	f7ff fe97 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x82);
 80005f2:	2082      	movs	r0, #130	@ 0x82
 80005f4:	f7ff fe94 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x27);
 80005f8:	2027      	movs	r0, #39	@ 0x27
 80005fa:	f7ff fe91 	bl	8000320 <LCD_Write_Data>

	//3GAMMA FUNCTION DISABLE
	LCD_Write_Command(0xF2);
 80005fe:	20f2      	movs	r0, #242	@ 0xf2
 8000600:	f7ff fe58 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fe8b 	bl	8000320 <LCD_Write_Data>

	//GAMMA CURVE SELECTED
	LCD_Write_Command(0x26);
 800060a:	2026      	movs	r0, #38	@ 0x26
 800060c:	f7ff fe52 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x01);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff fe85 	bl	8000320 <LCD_Write_Data>

	//POSITIVE GAMMA CORRECTION
	LCD_Write_Command(0xE0);
 8000616:	20e0      	movs	r0, #224	@ 0xe0
 8000618:	f7ff fe4c 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x0F);
 800061c:	200f      	movs	r0, #15
 800061e:	f7ff fe7f 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x31);
 8000622:	2031      	movs	r0, #49	@ 0x31
 8000624:	f7ff fe7c 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x2B);
 8000628:	202b      	movs	r0, #43	@ 0x2b
 800062a:	f7ff fe79 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 800062e:	200c      	movs	r0, #12
 8000630:	f7ff fe76 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8000634:	200e      	movs	r0, #14
 8000636:	f7ff fe73 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x08);
 800063a:	2008      	movs	r0, #8
 800063c:	f7ff fe70 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x4E);
 8000640:	204e      	movs	r0, #78	@ 0x4e
 8000642:	f7ff fe6d 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0xF1);
 8000646:	20f1      	movs	r0, #241	@ 0xf1
 8000648:	f7ff fe6a 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x37);
 800064c:	2037      	movs	r0, #55	@ 0x37
 800064e:	f7ff fe67 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8000652:	2007      	movs	r0, #7
 8000654:	f7ff fe64 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8000658:	2010      	movs	r0, #16
 800065a:	f7ff fe61 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 800065e:	2003      	movs	r0, #3
 8000660:	f7ff fe5e 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8000664:	200e      	movs	r0, #14
 8000666:	f7ff fe5b 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x09);
 800066a:	2009      	movs	r0, #9
 800066c:	f7ff fe58 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe55 	bl	8000320 <LCD_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	LCD_Write_Command(0xE1);
 8000676:	20e1      	movs	r0, #225	@ 0xe1
 8000678:	f7ff fe1c 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff fe4f 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8000682:	200e      	movs	r0, #14
 8000684:	f7ff fe4c 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x14);
 8000688:	2014      	movs	r0, #20
 800068a:	f7ff fe49 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 800068e:	2003      	movs	r0, #3
 8000690:	f7ff fe46 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x11);
 8000694:	2011      	movs	r0, #17
 8000696:	f7ff fe43 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x07);
 800069a:	2007      	movs	r0, #7
 800069c:	f7ff fe40 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x31);
 80006a0:	2031      	movs	r0, #49	@ 0x31
 80006a2:	f7ff fe3d 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0xC1);
 80006a6:	20c1      	movs	r0, #193	@ 0xc1
 80006a8:	f7ff fe3a 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x48);
 80006ac:	2048      	movs	r0, #72	@ 0x48
 80006ae:	f7ff fe37 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x08);
 80006b2:	2008      	movs	r0, #8
 80006b4:	f7ff fe34 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 80006b8:	200f      	movs	r0, #15
 80006ba:	f7ff fe31 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 80006be:	200c      	movs	r0, #12
 80006c0:	f7ff fe2e 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x31);
 80006c4:	2031      	movs	r0, #49	@ 0x31
 80006c6:	f7ff fe2b 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x36);
 80006ca:	2036      	movs	r0, #54	@ 0x36
 80006cc:	f7ff fe28 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 80006d0:	200f      	movs	r0, #15
 80006d2:	f7ff fe25 	bl	8000320 <LCD_Write_Data>




	// exit sleep mode
	LCD_Write_Command(SLEEP_OUT);
 80006d6:	2011      	movs	r0, #17
 80006d8:	f7ff fdec 	bl	80002b4 <LCD_Write_Command>
	HAL_Delay(10);
 80006dc:	200a      	movs	r0, #10
 80006de:	f001 f8bf 	bl	8001860 <HAL_Delay>

	// turn on display
	LCD_Write_Command(DISPLAY_ON);
 80006e2:	2029      	movs	r0, #41	@ 0x29
 80006e4:	f7ff fde6 	bl	80002b4 <LCD_Write_Command>


	// starting rotation
	LCD_rotation(SCREEN_VERTICAL_SD_TOP);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fea7 	bl	800043c <LCD_rotation>
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LCD_set_address_block>:
 * @param y1 top left y value of block
 * @param x2 bottom right x value of block
 * @param y2 bottom right y value of block
 *
 * */
void LCD_set_address_block(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	0005      	movs	r5, r0
 80006fc:	000c      	movs	r4, r1
 80006fe:	0010      	movs	r0, r2
 8000700:	0019      	movs	r1, r3
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	1c2a      	adds	r2, r5, #0
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	1c22      	adds	r2, r4, #0
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	1cbb      	adds	r3, r7, #2
 8000710:	1c02      	adds	r2, r0, #0
 8000712:	801a      	strh	r2, [r3, #0]
 8000714:	003b      	movs	r3, r7
 8000716:	1c0a      	adds	r2, r1, #0
 8000718:	801a      	strh	r2, [r3, #0]

	assert(x1 <= LCD_WIDTH && "x1 out of bounds");
 800071a:	4b3c      	ldr	r3, [pc, #240]	@ (800080c <LCD_set_address_block+0x118>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	1dba      	adds	r2, r7, #6
 8000720:	8812      	ldrh	r2, [r2, #0]
 8000722:	429a      	cmp	r2, r3
 8000724:	d906      	bls.n	8000734 <LCD_set_address_block+0x40>
 8000726:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <LCD_set_address_block+0x11c>)
 8000728:	4a3a      	ldr	r2, [pc, #232]	@ (8000814 <LCD_set_address_block+0x120>)
 800072a:	21a9      	movs	r1, #169	@ 0xa9
 800072c:	0049      	lsls	r1, r1, #1
 800072e:	483a      	ldr	r0, [pc, #232]	@ (8000818 <LCD_set_address_block+0x124>)
 8000730:	f003 fbe4 	bl	8003efc <__assert_func>
	assert(x2 <= LCD_WIDTH && "x2 out of bounds");
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <LCD_set_address_block+0x118>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	1cba      	adds	r2, r7, #2
 800073a:	8812      	ldrh	r2, [r2, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d906      	bls.n	800074e <LCD_set_address_block+0x5a>
 8000740:	4b36      	ldr	r3, [pc, #216]	@ (800081c <LCD_set_address_block+0x128>)
 8000742:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <LCD_set_address_block+0x120>)
 8000744:	2154      	movs	r1, #84	@ 0x54
 8000746:	31ff      	adds	r1, #255	@ 0xff
 8000748:	4833      	ldr	r0, [pc, #204]	@ (8000818 <LCD_set_address_block+0x124>)
 800074a:	f003 fbd7 	bl	8003efc <__assert_func>
	assert(y1 <= LCD_HEIGHT && "y1 out of bounds");
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <LCD_set_address_block+0x12c>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	1d3a      	adds	r2, r7, #4
 8000754:	8812      	ldrh	r2, [r2, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d906      	bls.n	8000768 <LCD_set_address_block+0x74>
 800075a:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <LCD_set_address_block+0x130>)
 800075c:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <LCD_set_address_block+0x120>)
 800075e:	21aa      	movs	r1, #170	@ 0xaa
 8000760:	0049      	lsls	r1, r1, #1
 8000762:	482d      	ldr	r0, [pc, #180]	@ (8000818 <LCD_set_address_block+0x124>)
 8000764:	f003 fbca 	bl	8003efc <__assert_func>
	assert(y2 <= LCD_HEIGHT && "y1 out of bounds");
 8000768:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <LCD_set_address_block+0x12c>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	003a      	movs	r2, r7
 800076e:	8812      	ldrh	r2, [r2, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d906      	bls.n	8000782 <LCD_set_address_block+0x8e>
 8000774:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <LCD_set_address_block+0x134>)
 8000776:	4a27      	ldr	r2, [pc, #156]	@ (8000814 <LCD_set_address_block+0x120>)
 8000778:	2156      	movs	r1, #86	@ 0x56
 800077a:	31ff      	adds	r1, #255	@ 0xff
 800077c:	4826      	ldr	r0, [pc, #152]	@ (8000818 <LCD_set_address_block+0x124>)
 800077e:	f003 fbbd 	bl	8003efc <__assert_func>

	LCD_Write_Command(MEMORY_BLOCK_COLUMNS);
 8000782:	202a      	movs	r0, #42	@ 0x2a
 8000784:	f7ff fd96 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(x1>>8);
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff fdc4 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(x1);
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fdbe 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(x2>>8);
 80007a4:	1cbb      	adds	r3, r7, #2
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fdb6 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(x2);
 80007b4:	1cbb      	adds	r3, r7, #2
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fdb0 	bl	8000320 <LCD_Write_Data>

	LCD_Write_Command(MEMORY_BLOCK_ROWS);
 80007c0:	202b      	movs	r0, #43	@ 0x2b
 80007c2:	f7ff fd77 	bl	80002b4 <LCD_Write_Command>
	LCD_Write_Data(y1>>8);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff fda5 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(y1);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff fd9f 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(y2>>8);
 80007e2:	003b      	movs	r3, r7
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff fd97 	bl	8000320 <LCD_Write_Data>
	LCD_Write_Data(y2);
 80007f2:	003b      	movs	r3, r7
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fd91 	bl	8000320 <LCD_Write_Data>

	LCD_Write_Command(MEMORY_BLOCK_PIXELS);
 80007fe:	202c      	movs	r0, #44	@ 0x2c
 8000800:	f7ff fd58 	bl	80002b4 <LCD_Write_Command>
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bdb0      	pop	{r4, r5, r7, pc}
 800080c:	20002b18 	.word	0x20002b18
 8000810:	08004eb0 	.word	0x08004eb0
 8000814:	08004f6c 	.word	0x08004f6c
 8000818:	08004ed8 	.word	0x08004ed8
 800081c:	08004ef4 	.word	0x08004ef4
 8000820:	20002b16 	.word	0x20002b16
 8000824:	08004f1c 	.word	0x08004f1c
 8000828:	08004f44 	.word	0x08004f44

0800082c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000830:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_CRC_Init+0x40>)
 8000832:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <MX_CRC_Init+0x44>)
 8000834:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <MX_CRC_Init+0x40>)
 8000838:	2200      	movs	r2, #0
 800083a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_CRC_Init+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_CRC_Init+0x40>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_CRC_Init+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_CRC_Init+0x40>)
 8000850:	2201      	movs	r2, #1
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <MX_CRC_Init+0x40>)
 8000856:	0018      	movs	r0, r3
 8000858:	f001 f904 	bl	8001a64 <HAL_CRC_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000860:	f000 fc84 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	20002b1c 	.word	0x20002b1c
 8000870:	40023000 	.word	0x40023000

08000874 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <HAL_CRC_MspInit+0x34>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_CRC_MspInit+0x38>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_CRC_MspInit+0x38>)
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	430a      	orrs	r2, r1
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_CRC_MspInit+0x38>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	2240      	movs	r2, #64	@ 0x40
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b004      	add	sp, #16
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40023000 	.word	0x40023000
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_DMA_Init+0x38>)
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_DMA_Init+0x38>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	615a      	str	r2, [r3, #20]
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_DMA_Init+0x38>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	200b      	movs	r0, #11
 80008d4:	f001 f894 	bl	8001a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80008d8:	200b      	movs	r0, #11
 80008da:	f001 f8a6 	bl	8001a2a <HAL_NVIC_EnableIRQ>

}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <draw_asteroid>:
static volatile uint16_t score = 0;
static uint8_t* number[] = {number_0, number_1, number_2, number_3, number_4, number_5, number_6, number_7, number_8, number_9};
//static uint16_t score = 0;
static Laser lasers[MAX_NUM_LASERS];

void draw_asteroid() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af02      	add	r7, sp, #8
	draw_custom_block(100, 100, ASTEROID_SIZE, ASTEROID_SIZE, asteroid);
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <draw_asteroid+0x1c>)
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2328      	movs	r3, #40	@ 0x28
 80008f8:	2228      	movs	r2, #40	@ 0x28
 80008fa:	2164      	movs	r1, #100	@ 0x64
 80008fc:	2064      	movs	r0, #100	@ 0x64
 80008fe:	f000 fac7 	bl	8000e90 <draw_custom_block>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20001db4 	.word	0x20001db4

0800090c <init_laser>:



void init_laser() {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_NUM_LASERS; i++) {
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	e00e      	b.n	8000936 <init_laser+0x2a>
		lasers[i].x = 0;
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <init_laser+0x3c>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	2100      	movs	r1, #0
 8000920:	52d1      	strh	r1, [r2, r3]
		lasers[i].y = 0;
 8000922:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <init_laser+0x3c>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	3302      	adds	r3, #2
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < MAX_NUM_LASERS; i++) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b04      	cmp	r3, #4
 800093a:	dded      	ble.n	8000918 <init_laser+0xc>
	}
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	20002b44 	.word	0x20002b44

0800094c <game_init>:


void game_init() {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af02      	add	r7, sp, #8
	fillscreen(BACKGROUND_COLOR);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fad8 	bl	8000f08 <fillscreen>
	draw_custom_block(SPACESHIP_START_X, SPACESHIP_ROW, SPACESHIP_WIDTH, SPACESHIP_HEIGHT, spaceship_sprite);
 8000958:	238d      	movs	r3, #141	@ 0x8d
 800095a:	0059      	lsls	r1, r3, #1
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <game_init+0x30>)
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	231c      	movs	r3, #28
 8000962:	2223      	movs	r2, #35	@ 0x23
 8000964:	2065      	movs	r0, #101	@ 0x65
 8000966:	f000 fa93 	bl	8000e90 <draw_custom_block>
	update_score_board();
 800096a:	f000 f90f 	bl	8000b8c <update_score_board>
	draw_asteroid();
 800096e:	f7ff ffbd 	bl	80008ec <draw_asteroid>
	init_laser();
 8000972:	f7ff ffcb 	bl	800090c <init_laser>
	//while(1) {

	//}

}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000002c 	.word	0x2000002c

08000980 <move>:





void move(int8_t direction) {
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b085      	sub	sp, #20
 8000984:	af02      	add	r7, sp, #8
 8000986:	0002      	movs	r2, r0
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	701a      	strb	r2, [r3, #0]

	// check its not going off the screen
	if (direction > 0 && spaceship_curr_loc + direction + SPACESHIP_WIDTH >= LCD_get_width()) {
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	dd0d      	ble.n	80009b2 <move+0x32>
 8000996:	4b2f      	ldr	r3, [pc, #188]	@ (8000a54 <move+0xd4>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	3323      	adds	r3, #35	@ 0x23
 80009a6:	001c      	movs	r4, r3
 80009a8:	f7ff fc62 	bl	8000270 <LCD_get_width>
 80009ac:	0003      	movs	r3, r0
 80009ae:	429c      	cmp	r4, r3
 80009b0:	da4a      	bge.n	8000a48 <move+0xc8>
		return;
	}
	if (direction < 0 && spaceship_curr_loc + direction < 0) {
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b8:	d908      	bls.n	80009cc <move+0x4c>
 80009ba:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <move+0xd4>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	001a      	movs	r2, r3
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	18d3      	adds	r3, r2, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db3f      	blt.n	8000a4c <move+0xcc>
		return;
	}

	draw_custom_block(spaceship_curr_loc + direction, SPACESHIP_ROW, SPACESHIP_WIDTH, SPACESHIP_HEIGHT, spaceship_sprite);
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <move+0xd4>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	b298      	uxth	r0, r3
 80009dc:	238d      	movs	r3, #141	@ 0x8d
 80009de:	0059      	lsls	r1, r3, #1
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <move+0xd8>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	231c      	movs	r3, #28
 80009e6:	2223      	movs	r2, #35	@ 0x23
 80009e8:	f000 fa52 	bl	8000e90 <draw_custom_block>

	if (direction < 0) {
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80009f2:	d911      	bls.n	8000a18 <move+0x98>
		draw_rectangle(spaceship_curr_loc + SPACESHIP_WIDTH, SPACESHIP_ROW, -1 * direction, SPACESHIP_HEIGHT, BACKGROUND_COLOR);
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <move+0xd4>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	3323      	adds	r3, #35	@ 0x23
 80009fa:	b298      	uxth	r0, r3
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	425b      	negs	r3, r3
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	238d      	movs	r3, #141	@ 0x8d
 8000a0a:	0059      	lsls	r1, r3, #1
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	231c      	movs	r3, #28
 8000a12:	f000 f9c9 	bl	8000da8 <draw_rectangle>
 8000a16:	e00c      	b.n	8000a32 <move+0xb2>
	}
	else {
		draw_rectangle(spaceship_curr_loc, SPACESHIP_ROW, direction, SPACESHIP_HEIGHT, BACKGROUND_COLOR);
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <move+0xd4>)
 8000a1a:	8818      	ldrh	r0, [r3, #0]
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	238d      	movs	r3, #141	@ 0x8d
 8000a26:	0059      	lsls	r1, r3, #1
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	231c      	movs	r3, #28
 8000a2e:	f000 f9bb 	bl	8000da8 <draw_rectangle>
	}

	spaceship_curr_loc += direction;
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <move+0xd4>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <move+0xd4>)
 8000a44:	801a      	strh	r2, [r3, #0]
 8000a46:	e002      	b.n	8000a4e <move+0xce>
		return;
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	e000      	b.n	8000a4e <move+0xce>
		return;
 8000a4c:	46c0      	nop			@ (mov r8, r8)
}
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000002 	.word	0x20000002
 8000a58:	2000002c 	.word	0x2000002c

08000a5c <move_laser>:





void move_laser() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af02      	add	r7, sp, #8
	for (int i = 0; i < MAX_NUM_LASERS; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e04b      	b.n	8000b00 <move_laser+0xa4>
		if (lasers[i].y != 0) {
 8000a68:	4a29      	ldr	r2, [pc, #164]	@ (8000b10 <move_laser+0xb4>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	18d3      	adds	r3, r2, r3
 8000a70:	3302      	adds	r3, #2
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d040      	beq.n	8000afa <move_laser+0x9e>
			if (lasers[i].y - 2 <= 0) {
 8000a78:	4a25      	ldr	r2, [pc, #148]	@ (8000b10 <move_laser+0xb4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	18d3      	adds	r3, r2, r3
 8000a80:	3302      	adds	r3, #2
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d807      	bhi.n	8000a98 <move_laser+0x3c>
				lasers[i].y = 0;
 8000a88:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <move_laser+0xb4>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	3302      	adds	r3, #2
 8000a92:	2200      	movs	r2, #0
 8000a94:	801a      	strh	r2, [r3, #0]
				continue;
 8000a96:	e030      	b.n	8000afa <move_laser+0x9e>
			}
			lasers[i].y -= 2;
 8000a98:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <move_laser+0xb4>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	3b02      	subs	r3, #2
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	4a19      	ldr	r2, [pc, #100]	@ (8000b10 <move_laser+0xb4>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	18d3      	adds	r3, r2, r3
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	1c0a      	adds	r2, r1, #0
 8000ab4:	801a      	strh	r2, [r3, #0]
			draw_custom_block(lasers[i].x, lasers[i].y, LASER_WIDTH, LASER_LENGTH, laser_sprite);
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <move_laser+0xb4>)
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	5ad0      	ldrh	r0, [r2, r3]
 8000abe:	4a14      	ldr	r2, [pc, #80]	@ (8000b10 <move_laser+0xb4>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	8819      	ldrh	r1, [r3, #0]
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <move_laser+0xb8>)
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	230f      	movs	r3, #15
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	f000 f9dd 	bl	8000e90 <draw_custom_block>
			draw_rectangle(lasers[i].x, lasers[i].y + LASER_LENGTH + 2, LASER_WIDTH, 2, BACKGROUND_COLOR);
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <move_laser+0xb4>)
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	5ad0      	ldrh	r0, [r2, r3]
 8000ade:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <move_laser+0xb4>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	3311      	adds	r3, #17
 8000aec:	b299      	uxth	r1, r3
 8000aee:	2300      	movs	r3, #0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2302      	movs	r3, #2
 8000af4:	2203      	movs	r2, #3
 8000af6:	f000 f957 	bl	8000da8 <draw_rectangle>
	for (int i = 0; i < MAX_NUM_LASERS; i++) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3301      	adds	r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	ddb0      	ble.n	8000a68 <move_laser+0xc>
		}
	}
}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20002b44 	.word	0x20002b44
 8000b14:	20002a34 	.word	0x20002a34

08000b18 <shoot_laser>:



void shoot_laser() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_NUM_LASERS; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e01b      	b.n	8000b5c <shoot_laser+0x44>
		if (lasers[i].y == 0) {
 8000b24:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <shoot_laser+0x50>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	18d3      	adds	r3, r2, r3
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d110      	bne.n	8000b56 <shoot_laser+0x3e>
			lasers[i].y = SPACESHIP_ROW - LASER_LENGTH;
 8000b34:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <shoot_laser+0x50>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	220c      	movs	r2, #12
 8000b40:	32ff      	adds	r2, #255	@ 0xff
 8000b42:	801a      	strh	r2, [r3, #0]
			lasers[i].x = spaceship_curr_loc + ((SPACESHIP_WIDTH - 1) / 2);
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <shoot_laser+0x54>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	3311      	adds	r3, #17
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <shoot_laser+0x50>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	52d1      	strh	r1, [r2, r3]
			return;
 8000b54:	e005      	b.n	8000b62 <shoot_laser+0x4a>
	for (int i = 0; i < MAX_NUM_LASERS; i++) {
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	dde0      	ble.n	8000b24 <shoot_laser+0xc>
		}
	}
}
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20002b44 	.word	0x20002b44
 8000b6c:	20000002 	.word	0x20000002

08000b70 <increase_score>:


void increase_score() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	score++;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <increase_score+0x18>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b02      	ldr	r3, [pc, #8]	@ (8000b88 <increase_score+0x18>)
 8000b80:	801a      	strh	r2, [r3, #0]
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20002b40 	.word	0x20002b40

08000b8c <update_score_board>:


void update_score_board() {
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af02      	add	r7, sp, #8
	uint16_t temp = score;
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	4a20      	ldr	r2, [pc, #128]	@ (8000c18 <update_score_board+0x8c>)
 8000b96:	8812      	ldrh	r2, [r2, #0]
 8000b98:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 3; i++) {
 8000b9a:	1d7b      	adds	r3, r7, #5
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e031      	b.n	8000c06 <update_score_board+0x7a>
		uint8_t num = temp % 10;
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fb3b 	bl	8000224 <__aeabi_uidivmod>
 8000bae:	000b      	movs	r3, r1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8000bb6:	1dbc      	adds	r4, r7, #6
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	210a      	movs	r1, #10
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff faaa 	bl	8000118 <__udivsi3>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	8023      	strh	r3, [r4, #0]
		draw_custom_block((SCORE_OFFSET * (3 - i)) + (NUMBER_WIDTH * (2 - i)), SCORE_OFFSET, NUMBER_WIDTH, NUMBER_HEIGHT, number[num]);
 8000bc8:	1d7b      	adds	r3, r7, #5
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	1ad1      	subs	r1, r2, r3
 8000bd0:	1d7b      	adds	r3, r7, #5
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	1ad2      	subs	r2, r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	1a9b      	subs	r3, r3, r2
 8000bde:	18cb      	adds	r3, r1, r3
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	18db      	adds	r3, r3, r3
 8000be4:	b298      	uxth	r0, r3
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <update_score_board+0x90>)
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	58d3      	ldr	r3, [r2, r3]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2314      	movs	r3, #20
 8000bf4:	220e      	movs	r2, #14
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	f000 f94a 	bl	8000e90 <draw_custom_block>
	for (uint8_t i = 0; i < 3; i++) {
 8000bfc:	1d7b      	adds	r3, r7, #5
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	1d7b      	adds	r3, r7, #5
 8000c02:	3201      	adds	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	1d7b      	adds	r3, r7, #5
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d9c9      	bls.n	8000ba2 <update_score_board+0x16>
	}
}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	20002b40 	.word	0x20002b40
 8000c1c:	20000004 	.word	0x20000004

08000c20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	240c      	movs	r4, #12
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2314      	movs	r3, #20
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f003 faa1 	bl	8004178 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	4b57      	ldr	r3, [pc, #348]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c3c:	2180      	movs	r1, #128	@ 0x80
 8000c3e:	0309      	lsls	r1, r1, #12
 8000c40:	430a      	orrs	r2, r1
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	031b      	lsls	r3, r3, #12
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b51      	ldr	r3, [pc, #324]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c54:	695a      	ldr	r2, [r3, #20]
 8000c56:	4b50      	ldr	r3, [pc, #320]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	0289      	lsls	r1, r1, #10
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	029b      	lsls	r3, r3, #10
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c70:	695a      	ldr	r2, [r3, #20]
 8000c72:	4b49      	ldr	r3, [pc, #292]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	02c9      	lsls	r1, r1, #11
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <MX_GPIO_Init+0x178>)
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	02db      	lsls	r3, r3, #11
 8000c84:	4013      	ands	r3, r2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000c8a:	2390      	movs	r3, #144	@ 0x90
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2103      	movs	r1, #3
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fb0d 	bl	80022b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	015b      	lsls	r3, r3, #5
 8000c9c:	483f      	ldr	r0, [pc, #252]	@ (8000d9c <MX_GPIO_Init+0x17c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	f001 fb06 	bl	80022b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000ca6:	23f0      	movs	r3, #240	@ 0xf0
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	483d      	ldr	r0, [pc, #244]	@ (8000da0 <MX_GPIO_Init+0x180>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	0019      	movs	r1, r3
 8000cb0:	f001 faff 	bl	80022b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_PUSH_Pin LEFT_PUSH_Pin */
  GPIO_InitStruct.Pin = RIGHT_PUSH_Pin|LEFT_PUSH_Pin;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8000da4 <MX_GPIO_Init+0x184>)
 8000cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	22c4      	movs	r2, #196	@ 0xc4
 8000cbe:	0392      	lsls	r2, r2, #14
 8000cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	4a35      	ldr	r2, [pc, #212]	@ (8000da0 <MX_GPIO_Init+0x180>)
 8000ccc:	0019      	movs	r1, r3
 8000cce:	0010      	movs	r0, r2
 8000cd0:	f001 f95a 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2201      	movs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	193a      	adds	r2, r7, r4
 8000cee:	2390      	movs	r3, #144	@ 0x90
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 f947 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHOOT_PUSH_Pin */
  GPIO_InitStruct.Pin = SHOOT_PUSH_Pin;
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2204      	movs	r2, #4
 8000d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2288      	movs	r2, #136	@ 0x88
 8000d06:	0352      	lsls	r2, r2, #13
 8000d08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SHOOT_PUSH_GPIO_Port, &GPIO_InitStruct);
 8000d10:	000c      	movs	r4, r1
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	4a21      	ldr	r2, [pc, #132]	@ (8000d9c <MX_GPIO_Init+0x17c>)
 8000d16:	0019      	movs	r1, r3
 8000d18:	0010      	movs	r0, r2
 8000d1a:	f001 f935 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000d1e:	0021      	movs	r1, r4
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	0152      	lsls	r2, r2, #5
 8000d26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	000c      	movs	r4, r1
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <MX_GPIO_Init+0x17c>)
 8000d40:	0019      	movs	r1, r3
 8000d42:	0010      	movs	r0, r2
 8000d44:	f001 f920 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000d48:	0021      	movs	r1, r4
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	22f0      	movs	r2, #240	@ 0xf0
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	4a0e      	ldr	r2, [pc, #56]	@ (8000da0 <MX_GPIO_Init+0x180>)
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	f001 f90c 	bl	8001f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2006      	movs	r0, #6
 8000d76:	f000 fe43 	bl	8001a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000d7a:	2006      	movs	r0, #6
 8000d7c:	f000 fe55 	bl	8001a2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2007      	movs	r0, #7
 8000d86:	f000 fe3b 	bl	8001a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f000 fe4d 	bl	8001a2a <HAL_NVIC_EnableIRQ>

}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b009      	add	sp, #36	@ 0x24
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800
 8000da4:	00002008 	.word	0x00002008

08000da8 <draw_rectangle>:
}




void draw_rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0005      	movs	r5, r0
 8000db0:	000c      	movs	r4, r1
 8000db2:	0010      	movs	r0, r2
 8000db4:	0019      	movs	r1, r3
 8000db6:	1dbb      	adds	r3, r7, #6
 8000db8:	1c2a      	adds	r2, r5, #0
 8000dba:	801a      	strh	r2, [r3, #0]
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	1c22      	adds	r2, r4, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
 8000dc2:	1cbb      	adds	r3, r7, #2
 8000dc4:	1c02      	adds	r2, r0, #0
 8000dc6:	801a      	strh	r2, [r3, #0]
 8000dc8:	003b      	movs	r3, r7
 8000dca:	1c0a      	adds	r2, r1, #0
 8000dcc:	801a      	strh	r2, [r3, #0]

	if (w * h * 2 > FRAMEBUFFER_SIZE) {
 8000dce:	1cbb      	adds	r3, r7, #2
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	003a      	movs	r2, r7
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	4353      	muls	r3, r2
 8000dd8:	005a      	lsls	r2, r3, #1
 8000dda:	23f0      	movs	r3, #240	@ 0xf0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dc4f      	bgt.n	8000e82 <draw_rectangle+0xda>
		return;
	}

	uint8_t color_high = color >> 8;
 8000de2:	2120      	movs	r1, #32
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	230b      	movs	r3, #11
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	701a      	strb	r2, [r3, #0]
	uint8_t color_low = color;
 8000df2:	230a      	movs	r3, #10
 8000df4:	18fa      	adds	r2, r7, r3
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	7013      	strb	r3, [r2, #0]

	LCD_set_address_block(x, y, x + w - 1, y + h - 1);
 8000dfc:	1dba      	adds	r2, r7, #6
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	8812      	ldrh	r2, [r2, #0]
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	b29c      	uxth	r4, r3
 8000e0c:	1d3a      	adds	r2, r7, #4
 8000e0e:	003b      	movs	r3, r7
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	18d3      	adds	r3, r2, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	8819      	ldrh	r1, [r3, #0]
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	8818      	ldrh	r0, [r3, #0]
 8000e24:	0013      	movs	r3, r2
 8000e26:	0022      	movs	r2, r4
 8000e28:	f7ff fc64 	bl	80006f4 <LCD_set_address_block>


	for (int i = 0; i < w * h; i++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e011      	b.n	8000e56 <draw_rectangle+0xae>
		framebuffer[ i * 2] = color_high;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <draw_rectangle+0xe4>)
 8000e38:	210b      	movs	r1, #11
 8000e3a:	1879      	adds	r1, r7, r1
 8000e3c:	7809      	ldrb	r1, [r1, #0]
 8000e3e:	54d1      	strb	r1, [r2, r3]
		framebuffer[ i * 2 + 1 ] = color_low;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <draw_rectangle+0xe4>)
 8000e48:	210a      	movs	r1, #10
 8000e4a:	1879      	adds	r1, r7, r1
 8000e4c:	7809      	ldrb	r1, [r1, #0]
 8000e4e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < w * h; i++) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	1cbb      	adds	r3, r7, #2
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	8812      	ldrh	r2, [r2, #0]
 8000e5e:	4353      	muls	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	dbe5      	blt.n	8000e32 <draw_rectangle+0x8a>
	}

	LCD_write_pixel_data(framebuffer, w * h * 2);
 8000e66:	1cbb      	adds	r3, r7, #2
 8000e68:	003a      	movs	r2, r7
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	4353      	muls	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	18db      	adds	r3, r3, r3
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <draw_rectangle+0xe4>)
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fa86 	bl	800038c <LCD_write_pixel_data>
 8000e80:	e000      	b.n	8000e84 <draw_rectangle+0xdc>
		return;
 8000e82:	46c0      	nop			@ (mov r8, r8)
}
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	20002b58 	.word	0x20002b58

08000e90 <draw_custom_block>:
		}
	}
}


void draw_custom_block(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t* frame) {
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	0005      	movs	r5, r0
 8000e98:	000c      	movs	r4, r1
 8000e9a:	0010      	movs	r0, r2
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	1dbb      	adds	r3, r7, #6
 8000ea0:	1c2a      	adds	r2, r5, #0
 8000ea2:	801a      	strh	r2, [r3, #0]
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	1c22      	adds	r2, r4, #0
 8000ea8:	801a      	strh	r2, [r3, #0]
 8000eaa:	1cbb      	adds	r3, r7, #2
 8000eac:	1c02      	adds	r2, r0, #0
 8000eae:	801a      	strh	r2, [r3, #0]
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	1c0a      	adds	r2, r1, #0
 8000eb4:	801a      	strh	r2, [r3, #0]

	LCD_set_address_block(x, y, x + w - 1, y + h - 1);
 8000eb6:	1dba      	adds	r2, r7, #6
 8000eb8:	1cbb      	adds	r3, r7, #2
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29c      	uxth	r4, r3
 8000ec6:	1d3a      	adds	r2, r7, #4
 8000ec8:	003b      	movs	r3, r7
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	18d3      	adds	r3, r2, r3
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	1dbb      	adds	r3, r7, #6
 8000edc:	8818      	ldrh	r0, [r3, #0]
 8000ede:	0013      	movs	r3, r2
 8000ee0:	0022      	movs	r2, r4
 8000ee2:	f7ff fc07 	bl	80006f4 <LCD_set_address_block>
	LCD_write_pixel_data(frame, w * h * 2);
 8000ee6:	1cbb      	adds	r3, r7, #2
 8000ee8:	003a      	movs	r2, r7
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	8812      	ldrh	r2, [r2, #0]
 8000eee:	4353      	muls	r3, r2
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	18db      	adds	r3, r3, r3
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff fa46 	bl	800038c <LCD_write_pixel_data>
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bdb0      	pop	{r4, r5, r7, pc}

08000f08 <fillscreen>:


void fillscreen(uint16_t color) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	801a      	strh	r2, [r3, #0]
	uint16_t screen_height = LCD_get_height();
 8000f14:	230a      	movs	r3, #10
 8000f16:	18fc      	adds	r4, r7, r3
 8000f18:	f7ff f9a0 	bl	800025c <LCD_get_height>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	8023      	strh	r3, [r4, #0]
	uint16_t screen_width = LCD_get_width();
 8000f20:	2308      	movs	r3, #8
 8000f22:	18fc      	adds	r4, r7, r3
 8000f24:	f7ff f9a4 	bl	8000270 <LCD_get_width>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < screen_height; i = i + 3) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e00e      	b.n	8000f50 <fillscreen+0x48>
		draw_rectangle(0, i, screen_width, 3, color);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b299      	uxth	r1, r3
 8000f36:	2308      	movs	r3, #8
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	881a      	ldrh	r2, [r3, #0]
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2303      	movs	r3, #3
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff2f 	bl	8000da8 <draw_rectangle>
	for (int i = 0; i < screen_height; i = i + 3) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	230a      	movs	r3, #10
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbea      	blt.n	8000f32 <fillscreen+0x2a>
	}
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b005      	add	sp, #20
 8000f64:	bd90      	pop	{r4, r7, pc}
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6c:	f000 fc14 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f70:	f000 f838 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f74:	f7ff fe54 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f78:	f7ff fc9a 	bl	80008b0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000f7c:	f000 f8fc 	bl	8001178 <MX_SPI2_Init>
  MX_TIM15_Init();
 8000f80:	f000 fae8 	bl	8001554 <MX_TIM15_Init>
  MX_CRC_Init();
 8000f84:	f7ff fc52 	bl	800082c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 8000f88:	f7ff faa2 	bl	80004d0 <LCD_Init>


  game_init();
 8000f8c:	f7ff fcde 	bl	800094c <game_init>
    /* USER CODE BEGIN 3 */
	//if (HAL_GPIO_ReadPin(SHOOT_PUSH_GPIO_Port, SHOOT_PUSH_Pin) == GPIO_PIN_RESET) {
	//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	//	HAL_Delay(200);
	//}
	update_score_board();
 8000f90:	f7ff fdfc 	bl	8000b8c <update_score_board>
	increase_score();
 8000f94:	f7ff fdec 	bl	8000b70 <increase_score>
	move_laser();
 8000f98:	f7ff fd60 	bl	8000a5c <move_laser>


	if (left_pressed) {
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <main+0x70>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <main+0x48>
		move(-2);
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	425b      	negs	r3, r3
 8000faa:	0018      	movs	r0, r3
 8000fac:	f7ff fce8 	bl	8000980 <move>
	}


	if (right_pressed) {
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <main+0x74>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <main+0x58>
		move(2);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fce0 	bl	8000980 <move>
	}


	if (shoot_pressed == 1) {
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <main+0x78>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d1e2      	bne.n	8000f90 <main+0x28>
		shoot_pressed = 0;
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <main+0x78>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
		shoot_laser();
 8000fd0:	f7ff fda2 	bl	8000b18 <shoot_laser>
  {
 8000fd4:	e7dc      	b.n	8000f90 <main+0x28>
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	200032d8 	.word	0x200032d8
 8000fdc:	200032d9 	.word	0x200032d9
 8000fe0:	200032da 	.word	0x200032da

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b093      	sub	sp, #76	@ 0x4c
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	2414      	movs	r4, #20
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2334      	movs	r3, #52	@ 0x34
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f003 f8bf 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	2310      	movs	r3, #16
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f003 f8b8 	bl	8004178 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	0021      	movs	r1, r4
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2202      	movs	r2, #2
 800100e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2201      	movs	r2, #1
 8001014:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2210      	movs	r2, #16
 800101a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	187b      	adds	r3, r7, r1
 8001024:	0018      	movs	r0, r3
 8001026:	f001 f999 	bl	800235c <HAL_RCC_OscConfig>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800102e:	f000 f89d 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2100      	movs	r1, #0
 800104e:	0018      	movs	r0, r3
 8001050:	f001 fd0a 	bl	8002a68 <HAL_RCC_ClockConfig>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001058:	f000 f888 	bl	800116c <Error_Handler>
  }
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b013      	add	sp, #76	@ 0x4c
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	0002      	movs	r2, r0
 800106c:	1dbb      	adds	r3, r7, #6
 800106e:	801a      	strh	r2, [r3, #0]

	uint32_t now = HAL_GetTick();
 8001070:	f000 fbec 	bl	800184c <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]
	// Inside an interrupt context, interrupts are usually disabled or of lower priority.
	// The DMA complete callback (which sets lcd_dma_ready = true) happens in an interrupt.
	// Since interrupts are disabled while servicing GPIO EXTI, the DMA complete interrupt never runs.
	// So I need to do these flags

	switch (GPIO_Pin) {
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	0192      	lsls	r2, r2, #6
 8001080:	4293      	cmp	r3, r2
 8001082:	d008      	beq.n	8001096 <HAL_GPIO_EXTI_Callback+0x32>
 8001084:	2280      	movs	r2, #128	@ 0x80
 8001086:	0192      	lsls	r2, r2, #6
 8001088:	4293      	cmp	r3, r2
 800108a:	dc56      	bgt.n	800113a <HAL_GPIO_EXTI_Callback+0xd6>
 800108c:	2b04      	cmp	r3, #4
 800108e:	d040      	beq.n	8001112 <HAL_GPIO_EXTI_Callback+0xae>
 8001090:	2b08      	cmp	r3, #8
 8001092:	d020      	beq.n	80010d6 <HAL_GPIO_EXTI_Callback+0x72>
				shoot_pressed = 1;
			}
			break;

		default:
			break;
 8001094:	e051      	b.n	800113a <HAL_GPIO_EXTI_Callback+0xd6>
			if (now - last_right >= DEBOUNCE_DELAY) {
 8001096:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <HAL_GPIO_EXTI_Callback+0xec>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b31      	cmp	r3, #49	@ 0x31
 80010a0:	d94d      	bls.n	800113e <HAL_GPIO_EXTI_Callback+0xda>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80010a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 f920 	bl	80022ec <HAL_GPIO_TogglePin>
				last_right = now;
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <HAL_GPIO_EXTI_Callback+0xec>)
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	601a      	str	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(RIGHT_PUSH_GPIO_Port, RIGHT_PUSH_Pin) == GPIO_PIN_SET) {
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	019b      	lsls	r3, r3, #6
 80010b6:	4a27      	ldr	r2, [pc, #156]	@ (8001154 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f001 f8dc 	bl	8002278 <HAL_GPIO_ReadPin>
 80010c0:	0003      	movs	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d103      	bne.n	80010ce <HAL_GPIO_EXTI_Callback+0x6a>
					right_pressed = 1;
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
			break;
 80010cc:	e037      	b.n	800113e <HAL_GPIO_EXTI_Callback+0xda>
					right_pressed = 0;
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <HAL_GPIO_EXTI_Callback+0xf4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
			break;
 80010d4:	e033      	b.n	800113e <HAL_GPIO_EXTI_Callback+0xda>
			if (now - last_left >= DEBOUNCE_DELAY) {
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_GPIO_EXTI_Callback+0xf8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b31      	cmp	r3, #49	@ 0x31
 80010e0:	d92f      	bls.n	8001142 <HAL_GPIO_EXTI_Callback+0xde>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 f900 	bl	80022ec <HAL_GPIO_TogglePin>
				last_left = now;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_GPIO_EXTI_Callback+0xf8>)
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	601a      	str	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(LEFT_PUSH_GPIO_Port, LEFT_PUSH_Pin) == GPIO_PIN_SET) {
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_GPIO_EXTI_Callback+0xf0>)
 80010f4:	2108      	movs	r1, #8
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 f8be 	bl	8002278 <HAL_GPIO_ReadPin>
 80010fc:	0003      	movs	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d103      	bne.n	800110a <HAL_GPIO_EXTI_Callback+0xa6>
					left_pressed = 1;
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
			break;
 8001108:	e01b      	b.n	8001142 <HAL_GPIO_EXTI_Callback+0xde>
					left_pressed = 0;
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_GPIO_EXTI_Callback+0xfc>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
			break;
 8001110:	e017      	b.n	8001142 <HAL_GPIO_EXTI_Callback+0xde>
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001118:	0019      	movs	r1, r3
 800111a:	0010      	movs	r0, r2
 800111c:	f001 f8e6 	bl	80022ec <HAL_GPIO_TogglePin>
			if (now - last_shoot > DEBOUNCE_DELAY) {
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b32      	cmp	r3, #50	@ 0x32
 800112a:	d90c      	bls.n	8001146 <HAL_GPIO_EXTI_Callback+0xe2>
				last_shoot = now;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x100>)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]
				shoot_pressed = 1;
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x104>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
			break;
 8001138:	e005      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0xe2>
			break;
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	e004      	b.n	8001148 <HAL_GPIO_EXTI_Callback+0xe4>
			break;
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	e002      	b.n	8001148 <HAL_GPIO_EXTI_Callback+0xe4>
			break;
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	e000      	b.n	8001148 <HAL_GPIO_EXTI_Callback+0xe4>
			break;
 8001146:	46c0      	nop			@ (mov r8, r8)

	}
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200032dc 	.word	0x200032dc
 8001154:	48000800 	.word	0x48000800
 8001158:	200032d9 	.word	0x200032d9
 800115c:	200032e0 	.word	0x200032e0
 8001160:	200032d8 	.word	0x200032d8
 8001164:	200032e4 	.word	0x200032e4
 8001168:	200032da 	.word	0x200032da

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <MX_SPI2_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <MX_SPI2_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_SPI2_Init+0x74>)
 8001184:	2282      	movs	r2, #130	@ 0x82
 8001186:	0052      	lsls	r2, r2, #1
 8001188:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_SPI2_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_SPI2_Init+0x74>)
 8001192:	22e0      	movs	r2, #224	@ 0xe0
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_SPI2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011a6:	2280      	movs	r2, #128	@ 0x80
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011c6:	2207      	movs	r2, #7
 80011c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011d2:	2208      	movs	r2, #8
 80011d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <MX_SPI2_Init+0x74>)
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 fd91 	bl	8002d00 <HAL_SPI_Init>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f7ff ffc3 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200032e8 	.word	0x200032e8
 80011f0:	40003800 	.word	0x40003800

080011f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b08b      	sub	sp, #44	@ 0x2c
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	2414      	movs	r4, #20
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f002 ffb6 	bl	8004178 <memset>
  if(spiHandle->Instance==SPI2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a38      	ldr	r2, [pc, #224]	@ (80012f4 <HAL_SPI_MspInit+0x100>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d169      	bne.n	80012ea <HAL_SPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001216:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <HAL_SPI_MspInit+0x104>)
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <HAL_SPI_MspInit+0x104>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	01c9      	lsls	r1, r1, #7
 8001220:	430a      	orrs	r2, r1
 8001222:	61da      	str	r2, [r3, #28]
 8001224:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <HAL_SPI_MspInit+0x104>)
 8001226:	69da      	ldr	r2, [r3, #28]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	01db      	lsls	r3, r3, #7
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <HAL_SPI_MspInit+0x104>)
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <HAL_SPI_MspInit+0x104>)
 8001238:	2180      	movs	r1, #128	@ 0x80
 800123a:	02c9      	lsls	r1, r1, #11
 800123c:	430a      	orrs	r2, r1
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_SPI_MspInit+0x104>)
 8001242:	695a      	ldr	r2, [r3, #20]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	02db      	lsls	r3, r3, #11
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	22a0      	movs	r2, #160	@ 0xa0
 8001252:	0212      	lsls	r2, r2, #8
 8001254:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	0021      	movs	r1, r4
 8001258:	187b      	adds	r3, r7, r1
 800125a:	2202      	movs	r2, #2
 800125c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	187b      	adds	r3, r7, r1
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2203      	movs	r2, #3
 8001268:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	187b      	adds	r3, r7, r1
 8001272:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <HAL_SPI_MspInit+0x108>)
 8001274:	0019      	movs	r1, r3
 8001276:	0010      	movs	r0, r2
 8001278:	f000 fe86 	bl	8001f88 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 800127e:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <HAL_SPI_MspInit+0x110>)
 8001280:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 8001284:	2210      	movs	r2, #16
 8001286:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 fcb4 	bl	8001c1c <HAL_DMA_Init>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 80012b8:	f7ff ff58 	bl	800116c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_SPI2_TX);
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_SPI_MspInit+0x114>)
 80012be:	23a8      	movs	r3, #168	@ 0xa8
 80012c0:	58d3      	ldr	r3, [r2, r3]
 80012c2:	4911      	ldr	r1, [pc, #68]	@ (8001308 <HAL_SPI_MspInit+0x114>)
 80012c4:	4a11      	ldr	r2, [pc, #68]	@ (800130c <HAL_SPI_MspInit+0x118>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	22a8      	movs	r2, #168	@ 0xa8
 80012ca:	508b      	str	r3, [r1, r2]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_SPI_MspInit+0x114>)
 80012ce:	23a8      	movs	r3, #168	@ 0xa8
 80012d0:	58d3      	ldr	r3, [r2, r3]
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <HAL_SPI_MspInit+0x114>)
 80012d4:	22c0      	movs	r2, #192	@ 0xc0
 80012d6:	0292      	lsls	r2, r2, #10
 80012d8:	4313      	orrs	r3, r2
 80012da:	22a8      	movs	r2, #168	@ 0xa8
 80012dc:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 80012e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_SPI_MspInit+0x10c>)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b00b      	add	sp, #44	@ 0x2c
 80012f0:	bd90      	pop	{r4, r7, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	40003800 	.word	0x40003800
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000400 	.word	0x48000400
 8001300:	2000334c 	.word	0x2000334c
 8001304:	40020058 	.word	0x40020058
 8001308:	40020000 	.word	0x40020000
 800130c:	fff0ffff 	.word	0xfff0ffff

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_MspInit+0x44>)
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <HAL_MspInit+0x44>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	619a      	str	r2, [r3, #24]
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_MspInit+0x44>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_MspInit+0x44>)
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_MspInit+0x44>)
 8001334:	2180      	movs	r1, #128	@ 0x80
 8001336:	0549      	lsls	r1, r1, #21
 8001338:	430a      	orrs	r2, r1
 800133a:	61da      	str	r2, [r3, #28]
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_MspInit+0x44>)
 800133e:	69da      	ldr	r2, [r3, #28]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	055b      	lsls	r3, r3, #21
 8001344:	4013      	ands	r3, r2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 fa52 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SHOOT_PUSH_Pin);
 800138e:	2004      	movs	r0, #4
 8001390:	f000 ffc8 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_PUSH_Pin);
 8001394:	2008      	movs	r0, #8
 8001396:	f000 ffc5 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_PUSH_Pin);
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	019b      	lsls	r3, r3, #6
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 ffbb 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x14>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fcdc 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	2000334c 	.word	0x2000334c

080013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_kill>:

int _kill(int pid, int sig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e2:	f002 ff1f 	bl	8004224 <__errno>
 80013e6:	0003      	movs	r3, r0
 80013e8:	2216      	movs	r2, #22
 80013ea:	601a      	str	r2, [r3, #0]
  return -1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	425b      	negs	r3, r3
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_exit>:

void _exit (int status)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001400:	2301      	movs	r3, #1
 8001402:	425a      	negs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0011      	movs	r1, r2
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff ffe5 	bl	80013d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	e7fd      	b.n	800140e <_exit+0x16>

08001412 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e00a      	b.n	800143a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001424:	e000      	b.n	8001428 <_read+0x16>
 8001426:	bf00      	nop
 8001428:	0001      	movs	r1, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	60ba      	str	r2, [r7, #8]
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbf0      	blt.n	8001424 <_read+0x12>
  }

  return len;
 8001442:	687b      	ldr	r3, [r7, #4]
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b006      	add	sp, #24
 800144a:	bd80      	pop	{r7, pc}

0800144c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e009      	b.n	8001472 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	60ba      	str	r2, [r7, #8]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	e000      	b.n	800146c <_write+0x20>
 800146a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbf1      	blt.n	800145e <_write+0x12>
  }
  return len;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b006      	add	sp, #24
 8001482:	bd80      	pop	{r7, pc}

08001484 <_close>:

int _close(int file)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148c:	2301      	movs	r3, #1
 800148e:	425b      	negs	r3, r3
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}

08001498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	0192      	lsls	r2, r2, #6
 80014a8:	605a      	str	r2, [r3, #4]
  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_isatty>:

int _isatty(int file)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	18d3      	adds	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f002 fe8a 	bl	8004224 <__errno>
 8001510:	0003      	movs	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	2301      	movs	r3, #1
 8001518:	425b      	negs	r3, r3
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	18d2      	adds	r2, r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <_sbrk+0x64>)
 800152c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b006      	add	sp, #24
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20008000 	.word	0x20008000
 800153c:	00000400 	.word	0x00000400
 8001540:	20003390 	.word	0x20003390
 8001544:	20003530 	.word	0x20003530

08001548 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b092      	sub	sp, #72	@ 0x48
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	2340      	movs	r3, #64	@ 0x40
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	0018      	movs	r0, r3
 8001560:	2308      	movs	r3, #8
 8001562:	001a      	movs	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	f002 fe07 	bl	8004178 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	2324      	movs	r3, #36	@ 0x24
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	0018      	movs	r0, r3
 8001570:	231c      	movs	r3, #28
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f002 fdff 	bl	8004178 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	0018      	movs	r0, r3
 800157e:	2320      	movs	r3, #32
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f002 fdf8 	bl	8004178 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <MX_TIM15_Init+0x120>)
 800158a:	4a3b      	ldr	r2, [pc, #236]	@ (8001678 <MX_TIM15_Init+0x124>)
 800158c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8-1;
 800158e:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <MX_TIM15_Init+0x120>)
 8001590:	2207      	movs	r2, #7
 8001592:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <MX_TIM15_Init+0x120>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000-1;
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <MX_TIM15_Init+0x120>)
 800159c:	4a37      	ldr	r2, [pc, #220]	@ (800167c <MX_TIM15_Init+0x128>)
 800159e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <MX_TIM15_Init+0x120>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015a6:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <MX_TIM15_Init+0x120>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <MX_TIM15_Init+0x120>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <MX_TIM15_Init+0x120>)
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 ff69 	bl	800348c <HAL_TIM_PWM_Init>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80015be:	f7ff fdd5 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c2:	2140      	movs	r1, #64	@ 0x40
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015d0:	187a      	adds	r2, r7, r1
 80015d2:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <MX_TIM15_Init+0x120>)
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f002 fbd4 	bl	8003d84 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80015e0:	f7ff fdc4 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2124      	movs	r1, #36	@ 0x24
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2260      	movs	r2, #96	@ 0x60
 80015ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 65535;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	4a24      	ldr	r2, [pc, #144]	@ (8001680 <MX_TIM15_Init+0x12c>)
 80015f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001610:	1879      	adds	r1, r7, r1
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_TIM15_Init+0x120>)
 8001614:	2200      	movs	r2, #0
 8001616:	0018      	movs	r0, r3
 8001618:	f002 f840 	bl	800369c <HAL_TIM_PWM_ConfigChannel>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001620:	f7ff fda4 	bl	800116c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	0192      	lsls	r2, r2, #6
 8001648:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001650:	1d3a      	adds	r2, r7, #4
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_TIM15_Init+0x120>)
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f002 fbf2 	bl	8003e40 <HAL_TIMEx_ConfigBreakDeadTime>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8001660:	f7ff fd84 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <MX_TIM15_Init+0x120>)
 8001666:	0018      	movs	r0, r3
 8001668:	f000 f82c 	bl	80016c4 <HAL_TIM_MspPostInit>

}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b012      	add	sp, #72	@ 0x48
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20003394 	.word	0x20003394
 8001678:	40014000 	.word	0x40014000
 800167c:	0000270f 	.word	0x0000270f
 8001680:	0000ffff 	.word	0x0000ffff

08001684 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_TIM_PWM_MspInit+0x38>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d10d      	bne.n	80016b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	0249      	lsls	r1, r1, #9
 80016a0:	430a      	orrs	r2, r1
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	40014000 	.word	0x40014000
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	240c      	movs	r4, #12
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	0018      	movs	r0, r3
 80016d2:	2314      	movs	r3, #20
 80016d4:	001a      	movs	r2, r3
 80016d6:	2100      	movs	r1, #0
 80016d8:	f002 fd4e 	bl	8004178 <memset>
  if(timHandle->Instance==TIM15)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a15      	ldr	r2, [pc, #84]	@ (8001738 <HAL_TIM_MspPostInit+0x74>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d124      	bne.n	8001730 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_TIM_MspPostInit+0x78>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_TIM_MspPostInit+0x78>)
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	02c9      	lsls	r1, r1, #11
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_TIM_MspPostInit+0x78>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	02db      	lsls	r3, r3, #11
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	01d2      	lsls	r2, r2, #7
 8001708:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	0021      	movs	r1, r4
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2202      	movs	r2, #2
 8001710:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2201      	movs	r2, #1
 8001722:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001724:	187b      	adds	r3, r7, r1
 8001726:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_TIM_MspPostInit+0x7c>)
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f000 fc2c 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b009      	add	sp, #36	@ 0x24
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	40014000 	.word	0x40014000
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400

08001744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001744:	480d      	ldr	r0, [pc, #52]	@ (800177c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001746:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001748:	f7ff fefe 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	@ (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	@ (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001772:	f002 fd5d 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7ff fbf7 	bl	8000f68 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   r0, =_estack
 800177c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20002af8 	.word	0x20002af8
  ldr r2, =_sidata
 8001788:	0800502c 	.word	0x0800502c
  ldr r2, =_sbss
 800178c:	20002af8 	.word	0x20002af8
  ldr r4, =_ebss
 8001790:	2000352c 	.word	0x2000352c

08001794 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_COMP_IRQHandler>
	...

08001798 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <HAL_Init+0x24>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_Init+0x24>)
 80017a2:	2110      	movs	r1, #16
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f809 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ae:	f7ff fdaf 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_InitTick+0x5c>)
 80017ca:	681c      	ldr	r4, [r3, #0]
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_InitTick+0x60>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	0019      	movs	r1, r3
 80017d2:	23fa      	movs	r3, #250	@ 0xfa
 80017d4:	0098      	lsls	r0, r3, #2
 80017d6:	f7fe fc9f 	bl	8000118 <__udivsi3>
 80017da:	0003      	movs	r3, r0
 80017dc:	0019      	movs	r1, r3
 80017de:	0020      	movs	r0, r4
 80017e0:	f7fe fc9a 	bl	8000118 <__udivsi3>
 80017e4:	0003      	movs	r3, r0
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 f92f 	bl	8001a4a <HAL_SYSTICK_Config>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00f      	b.n	8001814 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d80b      	bhi.n	8001812 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	2301      	movs	r3, #1
 80017fe:	425b      	negs	r3, r3
 8001800:	2200      	movs	r2, #0
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f8fc 	bl	8001a00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_InitTick+0x64>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b003      	add	sp, #12
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	20002a90 	.word	0x20002a90
 8001820:	20002a98 	.word	0x20002a98
 8001824:	20002a94 	.word	0x20002a94

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	001a      	movs	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	18d2      	adds	r2, r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_IncTick+0x20>)
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	20002a98 	.word	0x20002a98
 8001848:	200033dc 	.word	0x200033dc

0800184c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	@ (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	200033dc 	.word	0x200033dc

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fff0 	bl	800184c <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	001a      	movs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	189b      	adds	r3, r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	f7ff ffe0 	bl	800184c <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	20002a98 	.word	0x20002a98

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	0002      	movs	r2, r0
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ba:	d809      	bhi.n	80018d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	001a      	movs	r2, r3
 80018c2:	231f      	movs	r3, #31
 80018c4:	401a      	ands	r2, r3
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <__NVIC_EnableIRQ+0x30>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	4091      	lsls	r1, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
  }
}
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	0002      	movs	r2, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f0:	d828      	bhi.n	8001944 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f2:	4a2f      	ldr	r2, [pc, #188]	@ (80019b0 <__NVIC_SetPriority+0xd4>)
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	33c0      	adds	r3, #192	@ 0xc0
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	589b      	ldr	r3, [r3, r2]
 8001902:	1dfa      	adds	r2, r7, #7
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	0011      	movs	r1, r2
 8001908:	2203      	movs	r2, #3
 800190a:	400a      	ands	r2, r1
 800190c:	00d2      	lsls	r2, r2, #3
 800190e:	21ff      	movs	r1, #255	@ 0xff
 8001910:	4091      	lsls	r1, r2
 8001912:	000a      	movs	r2, r1
 8001914:	43d2      	mvns	r2, r2
 8001916:	401a      	ands	r2, r3
 8001918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	22ff      	movs	r2, #255	@ 0xff
 8001920:	401a      	ands	r2, r3
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	0018      	movs	r0, r3
 8001928:	2303      	movs	r3, #3
 800192a:	4003      	ands	r3, r0
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001930:	481f      	ldr	r0, [pc, #124]	@ (80019b0 <__NVIC_SetPriority+0xd4>)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b25b      	sxtb	r3, r3
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	430a      	orrs	r2, r1
 800193c:	33c0      	adds	r3, #192	@ 0xc0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001942:	e031      	b.n	80019a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001944:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <__NVIC_SetPriority+0xd8>)
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	0019      	movs	r1, r3
 800194c:	230f      	movs	r3, #15
 800194e:	400b      	ands	r3, r1
 8001950:	3b08      	subs	r3, #8
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3306      	adds	r3, #6
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	3304      	adds	r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1dfa      	adds	r2, r7, #7
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	0011      	movs	r1, r2
 8001964:	2203      	movs	r2, #3
 8001966:	400a      	ands	r2, r1
 8001968:	00d2      	lsls	r2, r2, #3
 800196a:	21ff      	movs	r1, #255	@ 0xff
 800196c:	4091      	lsls	r1, r2
 800196e:	000a      	movs	r2, r1
 8001970:	43d2      	mvns	r2, r2
 8001972:	401a      	ands	r2, r3
 8001974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	22ff      	movs	r2, #255	@ 0xff
 800197c:	401a      	ands	r2, r3
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	2303      	movs	r3, #3
 8001986:	4003      	ands	r3, r0
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	001c      	movs	r4, r3
 8001994:	230f      	movs	r3, #15
 8001996:	4023      	ands	r3, r4
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	430a      	orrs	r2, r1
 800199e:	3306      	adds	r3, #6
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	18c3      	adds	r3, r0, r3
 80019a4:	3304      	adds	r3, #4
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b003      	add	sp, #12
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	1e5a      	subs	r2, r3, #1
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	045b      	lsls	r3, r3, #17
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d301      	bcc.n	80019d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019cc:	2301      	movs	r3, #1
 80019ce:	e010      	b.n	80019f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <SysTick_Config+0x44>)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	3a01      	subs	r2, #1
 80019d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d8:	2301      	movs	r3, #1
 80019da:	425b      	negs	r3, r3
 80019dc:	2103      	movs	r1, #3
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff ff7c 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <SysTick_Config+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <SysTick_Config+0x44>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	1c02      	adds	r2, r0, #0
 8001a10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	0002      	movs	r2, r0
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ff33 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff ffaf 	bl	80019b8 <SysTick_Config>
 8001a5a:	0003      	movs	r3, r0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e056      	b.n	8001b24 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7f5b      	ldrb	r3, [r3, #29]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7fe fef3 	bl	8000874 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2202      	movs	r2, #2
 8001a92:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <HAL_CRC_Init+0xc8>)
 8001aa2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2118      	movs	r1, #24
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	e00b      	b.n	8001ace <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f835 	bl	8001b30 <HAL_CRCEx_Polynomial_Set>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e02a      	b.n	8001b24 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	795b      	ldrb	r3, [r3, #5]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4252      	negs	r2, r2
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	e004      	b.n	8001aec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6912      	ldr	r2, [r2, #16]
 8001aea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2260      	movs	r2, #96	@ 0x60
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2280      	movs	r2, #128	@ 0x80
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	04c11db7 	.word	0x04c11db7

08001b30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2117      	movs	r1, #23
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b44:	231f      	movs	r3, #31
 8001b46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d103      	bne.n	8001b58 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e045      	b.n	8001be4 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	613a      	str	r2, [r7, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_CRCEx_Polynomial_Set+0x46>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	221f      	movs	r2, #31
 8001b68:	4013      	ands	r3, r2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	40da      	lsrs	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f1      	beq.n	8001b5a <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b18      	cmp	r3, #24
 8001b7a:	d00f      	beq.n	8001b9c <HAL_CRCEx_Polynomial_Set+0x6c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b18      	cmp	r3, #24
 8001b80:	d824      	bhi.n	8001bcc <HAL_CRCEx_Polynomial_Set+0x9c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d011      	beq.n	8001bac <HAL_CRCEx_Polynomial_Set+0x7c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d81e      	bhi.n	8001bcc <HAL_CRCEx_Polynomial_Set+0x9c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_CRCEx_Polynomial_Set+0xa6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d010      	beq.n	8001bbc <HAL_CRCEx_Polynomial_Set+0x8c>
 8001b9a:	e017      	b.n	8001bcc <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d91b      	bls.n	8001bda <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8001ba2:	2317      	movs	r3, #23
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001baa:	e016      	b.n	8001bda <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	d915      	bls.n	8001bde <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001bba:	e010      	b.n	8001bde <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	d90f      	bls.n	8001be2 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8001bc2:	2317      	movs	r3, #23
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001bca:	e00a      	b.n	8001be2 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001bcc:	2317      	movs	r3, #23
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
        break;
 8001bd4:	e006      	b.n	8001be4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	e004      	b.n	8001be4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	e002      	b.n	8001be4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	e000      	b.n	8001be4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001be2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8001be4:	2317      	movs	r3, #23
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2218      	movs	r2, #24
 8001bfe:	4393      	bics	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c0c:	2317      	movs	r3, #23
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	781b      	ldrb	r3, [r3, #0]
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b006      	add	sp, #24
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e036      	b.n	8001ca0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2221      	movs	r2, #33	@ 0x21
 8001c36:	2102      	movs	r1, #2
 8001c38:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_DMA_Init+0x8c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f946 	bl	8001f14 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2221      	movs	r2, #33	@ 0x21
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b004      	add	sp, #16
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	ffffc00f 	.word	0xffffc00f

08001cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2317      	movs	r3, #23
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Start_IT+0x24>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e04f      	b.n	8001d70 <HAL_DMA_Start_IT+0xc4>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2221      	movs	r2, #33	@ 0x21
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d13a      	bne.n	8001d5a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2221      	movs	r2, #33	@ 0x21
 8001ce8:	2102      	movs	r1, #2
 8001cea:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	438a      	bics	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f8d7 	bl	8001ebc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	210e      	movs	r1, #14
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e00f      	b.n	8001d48 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	210a      	movs	r1, #10
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2104      	movs	r1, #4
 8001d44:	438a      	bics	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d62:	2317      	movs	r3, #23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001d6a:	2317      	movs	r3, #23
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b006      	add	sp, #24
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	2204      	movs	r2, #4
 8001d96:	409a      	lsls	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d024      	beq.n	8001dea <HAL_DMA_IRQHandler+0x72>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d020      	beq.n	8001dea <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2220      	movs	r2, #32
 8001db0:	4013      	ands	r3, r2
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4091      	lsls	r1, r2
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d100      	bne.n	8001dde <HAL_DMA_IRQHandler+0x66>
 8001ddc:	e06a      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	0010      	movs	r0, r2
 8001de6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001de8:	e064      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	2202      	movs	r2, #2
 8001df0:	409a      	lsls	r2, r3
 8001df2:	0013      	movs	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	d02b      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xda>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d027      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d10b      	bne.n	8001e26 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	210a      	movs	r1, #10
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2221      	movs	r2, #33	@ 0x21
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4091      	lsls	r1, r2
 8001e32:	000a      	movs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d036      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e50:	e030      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	2208      	movs	r2, #8
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d028      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2208      	movs	r2, #8
 8001e66:	4013      	ands	r3, r2
 8001e68:	d024      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	210e      	movs	r1, #14
 8001e76:	438a      	bics	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e82:	2101      	movs	r1, #1
 8001e84:	4091      	lsls	r1, r2
 8001e86:	000a      	movs	r2, r1
 8001e88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2221      	movs	r2, #33	@ 0x21
 8001e94:	2101      	movs	r1, #1
 8001e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	0010      	movs	r0, r2
 8001eb0:	4798      	blx	r3
    }
  }
}
 8001eb2:	e7ff      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x13c>
 8001eb4:	46c0      	nop			@ (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4091      	lsls	r1, r2
 8001ed6:	000a      	movs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d108      	bne.n	8001efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001efa:	e007      	b.n	8001f0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]
}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	001a      	movs	r2, r3
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <DMA_CalcBaseAndBitshift+0x60>)
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d810      	bhi.n	8001f4a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <DMA_CalcBaseAndBitshift+0x64>)
 8001f2e:	4694      	mov	ip, r2
 8001f30:	4463      	add	r3, ip
 8001f32:	2114      	movs	r1, #20
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe f8ef 	bl	8000118 <__udivsi3>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <DMA_CalcBaseAndBitshift+0x68>)
 8001f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001f48:	e00f      	b.n	8001f6a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <DMA_CalcBaseAndBitshift+0x6c>)
 8001f50:	4694      	mov	ip, r2
 8001f52:	4463      	add	r3, ip
 8001f54:	2114      	movs	r1, #20
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7fe f8de 	bl	8000118 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	009a      	lsls	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <DMA_CalcBaseAndBitshift+0x70>)
 8001f68:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	40020407 	.word	0x40020407
 8001f78:	bffdfff8 	.word	0xbffdfff8
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	bffdfbf8 	.word	0xbffdfbf8
 8001f84:	40020400 	.word	0x40020400

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	e155      	b.n	8002244 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4091      	lsls	r1, r2
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d100      	bne.n	8001fb0 <HAL_GPIO_Init+0x28>
 8001fae:	e146      	b.n	800223e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d005      	beq.n	8001fc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d130      	bne.n	800202a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	0013      	movs	r3, r2
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	0013      	movs	r3, r2
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffe:	2201      	movs	r2, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	43da      	mvns	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	2201      	movs	r2, #1
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2203      	movs	r2, #3
 8002030:	4013      	ands	r3, r2
 8002032:	2b03      	cmp	r3, #3
 8002034:	d017      	beq.n	8002066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	43da      	mvns	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	409a      	lsls	r2, r3
 8002058:	0013      	movs	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	4013      	ands	r3, r2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d123      	bne.n	80020ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	58d3      	ldr	r3, [r2, r3]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2207      	movs	r2, #7
 8002084:	4013      	ands	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	43da      	mvns	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2107      	movs	r1, #7
 800209e:	400b      	ands	r3, r1
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	6939      	ldr	r1, [r7, #16]
 80020b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	43da      	mvns	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2203      	movs	r2, #3
 80020d8:	401a      	ands	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	23c0      	movs	r3, #192	@ 0xc0
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_GPIO_Init+0x174>
 80020fa:	e0a0      	b.n	800223e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fc:	4b57      	ldr	r3, [pc, #348]	@ (800225c <HAL_GPIO_Init+0x2d4>)
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b56      	ldr	r3, [pc, #344]	@ (800225c <HAL_GPIO_Init+0x2d4>)
 8002102:	2101      	movs	r1, #1
 8002104:	430a      	orrs	r2, r1
 8002106:	619a      	str	r2, [r3, #24]
 8002108:	4b54      	ldr	r3, [pc, #336]	@ (800225c <HAL_GPIO_Init+0x2d4>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002114:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_GPIO_Init+0x2d8>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	589b      	ldr	r3, [r3, r2]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2203      	movs	r2, #3
 8002126:	4013      	ands	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	409a      	lsls	r2, r3
 800212e:	0013      	movs	r3, r2
 8002130:	43da      	mvns	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	2390      	movs	r3, #144	@ 0x90
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	429a      	cmp	r2, r3
 8002140:	d019      	beq.n	8002176 <HAL_GPIO_Init+0x1ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a47      	ldr	r2, [pc, #284]	@ (8002264 <HAL_GPIO_Init+0x2dc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_GPIO_Init+0x1ea>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a46      	ldr	r2, [pc, #280]	@ (8002268 <HAL_GPIO_Init+0x2e0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00d      	beq.n	800216e <HAL_GPIO_Init+0x1e6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a45      	ldr	r2, [pc, #276]	@ (800226c <HAL_GPIO_Init+0x2e4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <HAL_GPIO_Init+0x1e2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a44      	ldr	r2, [pc, #272]	@ (8002270 <HAL_GPIO_Init+0x2e8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_GPIO_Init+0x1de>
 8002162:	2304      	movs	r3, #4
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x1f0>
 8002166:	2305      	movs	r3, #5
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x1f0>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x1f0>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x1f0>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x1f0>
 8002176:	2300      	movs	r3, #0
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	2103      	movs	r1, #3
 800217c:	400a      	ands	r2, r1
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002188:	4935      	ldr	r1, [pc, #212]	@ (8002260 <HAL_GPIO_Init+0x2d8>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43da      	mvns	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	035b      	lsls	r3, r3, #13
 80021ae:	4013      	ands	r3, r2
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	039b      	lsls	r3, r3, #14
 80021d8:	4013      	ands	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002214:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43da      	mvns	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	4013      	ands	r3, r2
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_GPIO_Init+0x2ec>)
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	40da      	lsrs	r2, r3
 800224c:	1e13      	subs	r3, r2, #0
 800224e:	d000      	beq.n	8002252 <HAL_GPIO_Init+0x2ca>
 8002250:	e6a2      	b.n	8001f98 <HAL_GPIO_Init+0x10>
  } 
}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	48000400 	.word	0x48000400
 8002268:	48000800 	.word	0x48000800
 800226c:	48000c00 	.word	0x48000c00
 8002270:	48001000 	.word	0x48001000
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	000a      	movs	r2, r1
 8002282:	1cbb      	adds	r3, r7, #2
 8002284:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	1cba      	adds	r2, r7, #2
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	4013      	ands	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002292:	230f      	movs	r3, #15
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e003      	b.n	80022a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022a4:	230f      	movs	r3, #15
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
  }
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	0008      	movs	r0, r1
 80022bc:	0011      	movs	r1, r2
 80022be:	1cbb      	adds	r3, r7, #2
 80022c0:	1c02      	adds	r2, r0, #0
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	1c7b      	adds	r3, r7, #1
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ca:	1c7b      	adds	r3, r7, #1
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022da:	e003      	b.n	80022e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022dc:	1cbb      	adds	r3, r7, #2
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	000a      	movs	r2, r1
 80022f6:	1cbb      	adds	r3, r7, #2
 80022f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002300:	1cbb      	adds	r3, r7, #2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	041a      	lsls	r2, r3, #16
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	1cb9      	adds	r1, r7, #2
 8002310:	8809      	ldrh	r1, [r1, #0]
 8002312:	400b      	ands	r3, r1
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b004      	add	sp, #16
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	0002      	movs	r2, r0
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002330:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	1dba      	adds	r2, r7, #6
 8002336:	8812      	ldrh	r2, [r2, #0]
 8002338:	4013      	ands	r3, r2
 800233a:	d008      	beq.n	800234e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800233e:	1dba      	adds	r2, r7, #6
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002344:	1dbb      	adds	r3, r7, #6
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe fe8b 	bl	8001064 <HAL_GPIO_EXTI_Callback>
  }
}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f000 fb76 	bl	8002a5c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d100      	bne.n	800237c <HAL_RCC_OscConfig+0x20>
 800237a:	e08e      	b.n	800249a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800237c:	4bc5      	ldr	r3, [pc, #788]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	220c      	movs	r2, #12
 8002382:	4013      	ands	r3, r2
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00e      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4bc2      	ldr	r3, [pc, #776]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	220c      	movs	r2, #12
 800238e:	4013      	ands	r3, r2
 8002390:	2b08      	cmp	r3, #8
 8002392:	d117      	bne.n	80023c4 <HAL_RCC_OscConfig+0x68>
 8002394:	4bbf      	ldr	r3, [pc, #764]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	23c0      	movs	r3, #192	@ 0xc0
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	401a      	ands	r2, r3
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	025b      	lsls	r3, r3, #9
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4bbb      	ldr	r3, [pc, #748]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	4013      	ands	r3, r2
 80023b0:	d100      	bne.n	80023b4 <HAL_RCC_OscConfig+0x58>
 80023b2:	e071      	b.n	8002498 <HAL_RCC_OscConfig+0x13c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d000      	beq.n	80023be <HAL_RCC_OscConfig+0x62>
 80023bc:	e06c      	b.n	8002498 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 fb4c 	bl	8002a5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x80>
 80023cc:	4bb1      	ldr	r3, [pc, #708]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4bb0      	ldr	r3, [pc, #704]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0249      	lsls	r1, r1, #9
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e02f      	b.n	800243c <HAL_RCC_OscConfig+0xe0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0xa2>
 80023e4:	4bab      	ldr	r3, [pc, #684]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4baa      	ldr	r3, [pc, #680]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023ea:	49ab      	ldr	r1, [pc, #684]	@ (8002698 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4ba8      	ldr	r3, [pc, #672]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80023f6:	49a9      	ldr	r1, [pc, #676]	@ (800269c <HAL_RCC_OscConfig+0x340>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e01e      	b.n	800243c <HAL_RCC_OscConfig+0xe0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d10e      	bne.n	8002424 <HAL_RCC_OscConfig+0xc8>
 8002406:	4ba3      	ldr	r3, [pc, #652]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4ba2      	ldr	r3, [pc, #648]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	02c9      	lsls	r1, r1, #11
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4b9f      	ldr	r3, [pc, #636]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b9e      	ldr	r3, [pc, #632]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800241a:	2180      	movs	r1, #128	@ 0x80
 800241c:	0249      	lsls	r1, r1, #9
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xe0>
 8002424:	4b9b      	ldr	r3, [pc, #620]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b9a      	ldr	r3, [pc, #616]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800242a:	499b      	ldr	r1, [pc, #620]	@ (8002698 <HAL_RCC_OscConfig+0x33c>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4b98      	ldr	r3, [pc, #608]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b97      	ldr	r3, [pc, #604]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002436:	4999      	ldr	r1, [pc, #612]	@ (800269c <HAL_RCC_OscConfig+0x340>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d014      	beq.n	800246e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff fa02 	bl	800184c <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244e:	f7ff f9fd 	bl	800184c <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	@ 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e2fd      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002460:	4b8c      	ldr	r3, [pc, #560]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0xf2>
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff f9ed 	bl	800184c <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff f9e8 	bl	800184c <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e2e8      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b82      	ldr	r3, [pc, #520]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x11c>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x14a>
 80024a4:	e06c      	b.n	8002580 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	220c      	movs	r2, #12
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024b0:	4b78      	ldr	r3, [pc, #480]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	220c      	movs	r2, #12
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d11f      	bne.n	80024fc <HAL_RCC_OscConfig+0x1a0>
 80024bc:	4b75      	ldr	r3, [pc, #468]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	23c0      	movs	r3, #192	@ 0xc0
 80024c2:	025b      	lsls	r3, r3, #9
 80024c4:	401a      	ands	r2, r3
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d116      	bne.n	80024fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	4b71      	ldr	r3, [pc, #452]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_OscConfig+0x188>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e2bb      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	22f8      	movs	r2, #248	@ 0xf8
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00da      	lsls	r2, r3, #3
 80024f4:	4b67      	ldr	r3, [pc, #412]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	e041      	b.n	8002580 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d024      	beq.n	800254e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002504:	4b63      	ldr	r3, [pc, #396]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b62      	ldr	r3, [pc, #392]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff f99c 	bl	800184c <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7ff f997 	bl	800184c <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e297      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b59      	ldr	r3, [pc, #356]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d0f1      	beq.n	800251a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b57      	ldr	r3, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	22f8      	movs	r2, #248	@ 0xf8
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00da      	lsls	r2, r3, #3
 8002546:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e018      	b.n	8002580 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002554:	2101      	movs	r1, #1
 8002556:	438a      	bics	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff f977 	bl	800184c <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7ff f972 	bl	800184c <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e272      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d1f1      	bne.n	8002564 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d036      	beq.n	80025f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d019      	beq.n	80025c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002596:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff f955 	bl	800184c <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff f950 	bl	800184c <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e250      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d0f1      	beq.n	80025a8 <HAL_RCC_OscConfig+0x24c>
 80025c4:	e018      	b.n	80025f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c6:	4b33      	ldr	r3, [pc, #204]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80025c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ca:	4b32      	ldr	r3, [pc, #200]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80025cc:	2101      	movs	r1, #1
 80025ce:	438a      	bics	r2, r1
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7ff f93b 	bl	800184c <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff f936 	bl	800184c <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e236      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ee:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	d1f1      	bne.n	80025dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2204      	movs	r2, #4
 80025fe:	4013      	ands	r3, r2
 8002600:	d100      	bne.n	8002604 <HAL_RCC_OscConfig+0x2a8>
 8002602:	e0b5      	b.n	8002770 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002604:	201f      	movs	r0, #31
 8002606:	183b      	adds	r3, r7, r0
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260c:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	d110      	bne.n	800263a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800261e:	2180      	movs	r1, #128	@ 0x80
 8002620:	0549      	lsls	r1, r1, #21
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	055b      	lsls	r3, r3, #21
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002634:	183b      	adds	r3, r7, r0
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_RCC_OscConfig+0x344>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4013      	ands	r3, r2
 8002644:	d11a      	bne.n	800267c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_RCC_OscConfig+0x344>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_RCC_OscConfig+0x344>)
 800264c:	2180      	movs	r1, #128	@ 0x80
 800264e:	0049      	lsls	r1, r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002654:	f7ff f8fa 	bl	800184c <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7ff f8f5 	bl	800184c <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	@ 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1f5      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_OscConfig+0x344>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4013      	ands	r3, r2
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10f      	bne.n	80026a4 <HAL_RCC_OscConfig+0x348>
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	4b02      	ldr	r3, [pc, #8]	@ (8002694 <HAL_RCC_OscConfig+0x338>)
 800268a:	2101      	movs	r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	621a      	str	r2, [r3, #32]
 8002690:	e036      	b.n	8002700 <HAL_RCC_OscConfig+0x3a4>
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	fffeffff 	.word	0xfffeffff
 800269c:	fffbffff 	.word	0xfffbffff
 80026a0:	40007000 	.word	0x40007000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x36a>
 80026ac:	4bca      	ldr	r3, [pc, #808]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ae:	6a1a      	ldr	r2, [r3, #32]
 80026b0:	4bc9      	ldr	r3, [pc, #804]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	438a      	bics	r2, r1
 80026b6:	621a      	str	r2, [r3, #32]
 80026b8:	4bc7      	ldr	r3, [pc, #796]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	4bc6      	ldr	r3, [pc, #792]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026be:	2104      	movs	r1, #4
 80026c0:	438a      	bics	r2, r1
 80026c2:	621a      	str	r2, [r3, #32]
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x3a4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x38c>
 80026ce:	4bc2      	ldr	r3, [pc, #776]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	4bc1      	ldr	r3, [pc, #772]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026d4:	2104      	movs	r1, #4
 80026d6:	430a      	orrs	r2, r1
 80026d8:	621a      	str	r2, [r3, #32]
 80026da:	4bbf      	ldr	r3, [pc, #764]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6a1a      	ldr	r2, [r3, #32]
 80026de:	4bbe      	ldr	r3, [pc, #760]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026e0:	2101      	movs	r1, #1
 80026e2:	430a      	orrs	r2, r1
 80026e4:	621a      	str	r2, [r3, #32]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x3a4>
 80026e8:	4bbb      	ldr	r3, [pc, #748]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	4bba      	ldr	r3, [pc, #744]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	438a      	bics	r2, r1
 80026f2:	621a      	str	r2, [r3, #32]
 80026f4:	4bb8      	ldr	r3, [pc, #736]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4bb7      	ldr	r3, [pc, #732]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80026fa:	2104      	movs	r1, #4
 80026fc:	438a      	bics	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d014      	beq.n	8002732 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7ff f8a0 	bl	800184c <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e009      	b.n	8002726 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7ff f89b 	bl	800184c <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	4aaf      	ldr	r2, [pc, #700]	@ (80029dc <HAL_RCC_OscConfig+0x680>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e19a      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	4bac      	ldr	r3, [pc, #688]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x3b6>
 8002730:	e013      	b.n	800275a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7ff f88b 	bl	800184c <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	e009      	b.n	8002750 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7ff f886 	bl	800184c <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	4aa5      	ldr	r2, [pc, #660]	@ (80029dc <HAL_RCC_OscConfig+0x680>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e185      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4ba1      	ldr	r3, [pc, #644]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	2202      	movs	r2, #2
 8002756:	4013      	ands	r3, r2
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800275a:	231f      	movs	r3, #31
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b9c      	ldr	r3, [pc, #624]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	4b9b      	ldr	r3, [pc, #620]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800276a:	499d      	ldr	r1, [pc, #628]	@ (80029e0 <HAL_RCC_OscConfig+0x684>)
 800276c:	400a      	ands	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d063      	beq.n	8002842 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d12a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002782:	4b95      	ldr	r3, [pc, #596]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002786:	4b94      	ldr	r3, [pc, #592]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002788:	2104      	movs	r1, #4
 800278a:	430a      	orrs	r2, r1
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800278e:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002792:	4b91      	ldr	r3, [pc, #580]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002794:	2101      	movs	r1, #1
 8002796:	430a      	orrs	r2, r1
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7ff f857 	bl	800184c <HAL_GetTick>
 800279e:	0003      	movs	r3, r0
 80027a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027a4:	f7ff f852 	bl	800184c <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e152      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027b6:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d0f1      	beq.n	80027a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027c0:	4b85      	ldr	r3, [pc, #532]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c4:	22f8      	movs	r2, #248	@ 0xf8
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	00da      	lsls	r2, r3, #3
 80027d0:	4b81      	ldr	r3, [pc, #516]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d6:	e034      	b.n	8002842 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	3305      	adds	r3, #5
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027e0:	4b7d      	ldr	r3, [pc, #500]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e4:	4b7c      	ldr	r3, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027e6:	2104      	movs	r1, #4
 80027e8:	438a      	bics	r2, r1
 80027ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027ec:	4b7a      	ldr	r3, [pc, #488]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	22f8      	movs	r2, #248	@ 0xf8
 80027f2:	4393      	bics	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	@ 0x34
 8002802:	e01e      	b.n	8002842 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002804:	4b74      	ldr	r3, [pc, #464]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002808:	4b73      	ldr	r3, [pc, #460]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800280a:	2104      	movs	r1, #4
 800280c:	430a      	orrs	r2, r1
 800280e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002810:	4b71      	ldr	r3, [pc, #452]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002814:	4b70      	ldr	r3, [pc, #448]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7ff f816 	bl	800184c <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002826:	f7ff f811 	bl	800184c <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e111      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002838:	4b67      	ldr	r3, [pc, #412]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d1f1      	bne.n	8002826 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	d05c      	beq.n	8002906 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800284c:	4b62      	ldr	r3, [pc, #392]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	220c      	movs	r2, #12
 8002852:	4013      	ands	r3, r2
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d00e      	beq.n	8002876 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002858:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	220c      	movs	r2, #12
 800285e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002860:	2b08      	cmp	r3, #8
 8002862:	d114      	bne.n	800288e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002864:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	23c0      	movs	r3, #192	@ 0xc0
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	401a      	ands	r2, r3
 800286e:	23c0      	movs	r3, #192	@ 0xc0
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	429a      	cmp	r2, r3
 8002874:	d10b      	bne.n	800288e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002876:	4b58      	ldr	r3, [pc, #352]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d040      	beq.n	8002904 <HAL_RCC_OscConfig+0x5a8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d03c      	beq.n	8002904 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0e6      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01b      	beq.n	80028ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002896:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800289a:	4b4f      	ldr	r3, [pc, #316]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	0249      	lsls	r1, r1, #9
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe ffd2 	bl	800184c <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ae:	f7fe ffcd 	bl	800184c <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0cd      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028c0:	4b45      	ldr	r3, [pc, #276]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	4013      	ands	r3, r2
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x552>
 80028cc:	e01b      	b.n	8002906 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028ce:	4b42      	ldr	r3, [pc, #264]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d2:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	4943      	ldr	r1, [pc, #268]	@ (80029e4 <HAL_RCC_OscConfig+0x688>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe ffb7 	bl	800184c <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e4:	f7fe ffb2 	bl	800184c <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0b2      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028f6:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	029b      	lsls	r3, r3, #10
 80028fe:	4013      	ands	r3, r2
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x588>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002904:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x5b4>
 800290e:	e0a4      	b.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	220c      	movs	r2, #12
 8002916:	4013      	ands	r3, r2
 8002918:	2b08      	cmp	r3, #8
 800291a:	d100      	bne.n	800291e <HAL_RCC_OscConfig+0x5c2>
 800291c:	e078      	b.n	8002a10 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	2b02      	cmp	r3, #2
 8002924:	d14c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b2c      	ldr	r3, [pc, #176]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800292c:	492e      	ldr	r1, [pc, #184]	@ (80029e8 <HAL_RCC_OscConfig+0x68c>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe ff8b 	bl	800184c <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe ff86 	bl	800184c <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e086      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	049b      	lsls	r3, r3, #18
 8002956:	4013      	ands	r3, r2
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295a:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	220f      	movs	r2, #15
 8002960:	4393      	bics	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_RCC_OscConfig+0x690>)
 8002974:	4013      	ands	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	431a      	orrs	r2, r3
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0449      	lsls	r1, r1, #17
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe ff59 	bl	800184c <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe ff54 	bl	800184c <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e054      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	049b      	lsls	r3, r3, #18
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x644>
 80029be:	e04c      	b.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	4908      	ldr	r1, [pc, #32]	@ (80029e8 <HAL_RCC_OscConfig+0x68c>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe ff3e 	bl	800184c <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x6a6>
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	40021000 	.word	0x40021000
 80029dc:	00001388 	.word	0x00001388
 80029e0:	efffffff 	.word	0xefffffff
 80029e4:	fffeffff 	.word	0xfffeffff
 80029e8:	feffffff 	.word	0xfeffffff
 80029ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe ff2c 	bl	800184c <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e02c      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <HAL_RCC_OscConfig+0x708>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	049b      	lsls	r3, r3, #18
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x694>
 8002a0e:	e024      	b.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e01f      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <HAL_RCC_OscConfig+0x708>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_RCC_OscConfig+0x708>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	23c0      	movs	r3, #192	@ 0xc0
 8002a2c:	025b      	lsls	r3, r3, #9
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d10e      	bne.n	8002a56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	23f0      	movs	r3, #240	@ 0xf0
 8002a4a:	039b      	lsls	r3, r3, #14
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b008      	add	sp, #32
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000

08002a68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0bf      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b61      	ldr	r3, [pc, #388]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d911      	bls.n	8002aae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4393      	bics	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9c:	4b59      	ldr	r3, [pc, #356]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0a6      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2204      	movs	r2, #4
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d006      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ac2:	4b51      	ldr	r3, [pc, #324]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac8:	21e0      	movs	r1, #224	@ 0xe0
 8002aca:	00c9      	lsls	r1, r1, #3
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	22f0      	movs	r2, #240	@ 0xf0
 8002ad6:	4393      	bics	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	4b4a      	ldr	r3, [pc, #296]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	d04c      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d120      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07a      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	4013      	ands	r3, r2
 8002b18:	d114      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06e      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b26:	4b38      	ldr	r3, [pc, #224]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d108      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e062      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e05b      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b44:	4b30      	ldr	r3, [pc, #192]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7fe fe78 	bl	800184c <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	e009      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b62:	f7fe fe73 	bl	800184c <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	4a27      	ldr	r2, [pc, #156]	@ (8002c0c <HAL_RCC_ClockConfig+0x1a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e042      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1ec      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d211      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba8:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <HAL_RCC_ClockConfig+0x19c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e020      	b.n	8002bfc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a11      	ldr	r2, [pc, #68]	@ (8002c10 <HAL_RCC_ClockConfig+0x1a8>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bd8:	f000 f820 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bdc:	0001      	movs	r1, r0
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_RCC_ClockConfig+0x1a0>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	220f      	movs	r2, #15
 8002be6:	4013      	ands	r3, r2
 8002be8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <HAL_RCC_ClockConfig+0x1ac>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	000a      	movs	r2, r1
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b0>)
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f7fe fde3 	bl	80017c0 <HAL_InitTick>
  
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	00001388 	.word	0x00001388
 8002c10:	fffff8ff 	.word	0xfffff8ff
 8002c14:	08004f84 	.word	0x08004f84
 8002c18:	20002a90 	.word	0x20002a90

08002c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c36:	4b2d      	ldr	r3, [pc, #180]	@ (8002cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	220c      	movs	r2, #12
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d046      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002c46:	d848      	bhi.n	8002cda <HAL_RCC_GetSysClockFreq+0xbe>
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d002      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x3c>
 8002c50:	e043      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c54:	613b      	str	r3, [r7, #16]
      break;
 8002c56:	e043      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	4013      	ands	r3, r2
 8002c60:	4a24      	ldr	r2, [pc, #144]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c66:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	4a22      	ldr	r2, [pc, #136]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	23c0      	movs	r3, #192	@ 0xc0
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	025b      	lsls	r3, r3, #9
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d109      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	481a      	ldr	r0, [pc, #104]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c88:	f7fd fa46 	bl	8000118 <__udivsi3>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	001a      	movs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4353      	muls	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e01a      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	23c0      	movs	r3, #192	@ 0xc0
 8002c9c:	025b      	lsls	r3, r3, #9
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	23c0      	movs	r3, #192	@ 0xc0
 8002ca2:	025b      	lsls	r3, r3, #9
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4814      	ldr	r0, [pc, #80]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002cac:	f7fd fa34 	bl	8000118 <__udivsi3>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4353      	muls	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e008      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	480c      	ldr	r0, [pc, #48]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cc0:	f7fd fa2a 	bl	8000118 <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4353      	muls	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
      break;
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cdc:	613b      	str	r3, [r7, #16]
      break;
 8002cde:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ce0:	693b      	ldr	r3, [r7, #16]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b006      	add	sp, #24
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	08004f94 	.word	0x08004f94
 8002cf8:	08004fa4 	.word	0x08004fa4
 8002cfc:	02dc6c00 	.word	0x02dc6c00

08002d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0a8      	b.n	8002e64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	2382      	movs	r3, #130	@ 0x82
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d009      	beq.n	8002d3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
 8002d2c:	e005      	b.n	8002d3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	225d      	movs	r2, #93	@ 0x5d
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	225c      	movs	r2, #92	@ 0x5c
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fe fa4c 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	225d      	movs	r2, #93	@ 0x5d
 8002d60:	2102      	movs	r1, #2
 8002d62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2140      	movs	r1, #64	@ 0x40
 8002d70:	438a      	bics	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	23e0      	movs	r3, #224	@ 0xe0
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e002      	b.n	8002d8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	015b      	lsls	r3, r3, #5
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	23f0      	movs	r3, #240	@ 0xf0
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d008      	beq.n	8002daa <HAL_SPI_Init+0xaa>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	23e0      	movs	r3, #224	@ 0xe0
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d002      	beq.n	8002daa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	2382      	movs	r3, #130	@ 0x82
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	2384      	movs	r3, #132	@ 0x84
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2101      	movs	r1, #1
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6999      	ldr	r1, [r3, #24]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	400b      	ands	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2138      	movs	r1, #56	@ 0x38
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	2180      	movs	r1, #128	@ 0x80
 8002df0:	400b      	ands	r3, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	0011      	movs	r1, r2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	019b      	lsls	r3, r3, #6
 8002dfe:	401a      	ands	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	2204      	movs	r2, #4
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2110      	movs	r1, #16
 8002e18:	400b      	ands	r3, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e20:	2108      	movs	r1, #8
 8002e22:	400b      	ands	r3, r1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	23f0      	movs	r3, #240	@ 0xf0
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	400b      	ands	r3, r1
 8002e30:	431a      	orrs	r2, r3
 8002e32:	0011      	movs	r1, r2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	015b      	lsls	r3, r3, #5
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4907      	ldr	r1, [pc, #28]	@ (8002e6c <HAL_SPI_Init+0x16c>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	225d      	movs	r2, #93	@ 0x5d
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	fffff7ff 	.word	0xfffff7ff

08002e70 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	1dbb      	adds	r3, r7, #6
 8002e7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e7e:	2317      	movs	r3, #23
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	225c      	movs	r2, #92	@ 0x5c
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_SPI_Transmit_DMA+0x24>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0e3      	b.n	800305c <HAL_SPI_Transmit_DMA+0x1ec>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	225c      	movs	r2, #92	@ 0x5c
 8002e98:	2101      	movs	r1, #1
 8002e9a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	225d      	movs	r2, #93	@ 0x5d
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d004      	beq.n	8002eb2 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8002ea8:	2317      	movs	r3, #23
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2202      	movs	r2, #2
 8002eae:	701a      	strb	r2, [r3, #0]
    goto error;
 8002eb0:	e0cd      	b.n	800304e <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_SPI_Transmit_DMA+0x50>
 8002eb8:	1dbb      	adds	r3, r7, #6
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8002ec0:	2317      	movs	r3, #23
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ec8:	e0c1      	b.n	800304e <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	225d      	movs	r2, #93	@ 0x5d
 8002ece:	2103      	movs	r1, #3
 8002ed0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1dba      	adds	r2, r7, #6
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1dba      	adds	r2, r7, #6
 8002eea:	8812      	ldrh	r2, [r2, #0]
 8002eec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2244      	movs	r2, #68	@ 0x44
 8002f04:	2100      	movs	r1, #0
 8002f06:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2246      	movs	r2, #70	@ 0x46
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d110      	bne.n	8002f3e <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2140      	movs	r1, #64	@ 0x40
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	01c9      	lsls	r1, r1, #7
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f42:	4a48      	ldr	r2, [pc, #288]	@ (8003064 <HAL_SPI_Transmit_DMA+0x1f4>)
 8002f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	4a47      	ldr	r2, [pc, #284]	@ (8003068 <HAL_SPI_Transmit_DMA+0x1f8>)
 8002f4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f52:	4a46      	ldr	r2, [pc, #280]	@ (800306c <HAL_SPI_Transmit_DMA+0x1fc>)
 8002f54:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4941      	ldr	r1, [pc, #260]	@ (8003070 <HAL_SPI_Transmit_DMA+0x200>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	23e0      	movs	r3, #224	@ 0xe0
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d82f      	bhi.n	8002fda <HAL_SPI_Transmit_DMA+0x16a>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d128      	bne.n	8002fda <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	001a      	movs	r2, r3
 8002f90:	2301      	movs	r3, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d10f      	bne.n	8002fb6 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4933      	ldr	r1, [pc, #204]	@ (8003070 <HAL_SPI_Transmit_DMA+0x200>)
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fb4:	e011      	b.n	8002fda <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2180      	movs	r1, #128	@ 0x80
 8002fc2:	01c9      	lsls	r1, r1, #7
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ff2:	f7fe fe5b 	bl	8001cac <HAL_DMA_Start_IT>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	2210      	movs	r2, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003006:	2317      	movs	r3, #23
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]

    goto error;
 800300e:	e01e      	b.n	800304e <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	4013      	ands	r3, r2
 800301a:	2b40      	cmp	r3, #64	@ 0x40
 800301c:	d007      	beq.n	800302e <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2140      	movs	r1, #64	@ 0x40
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2120      	movs	r1, #32
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2102      	movs	r1, #2
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	225c      	movs	r2, #92	@ 0x5c
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003056:	2317      	movs	r3, #23
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	781b      	ldrb	r3, [r3, #0]
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b006      	add	sp, #24
 8003062:	bd80      	pop	{r7, pc}
 8003064:	08003141 	.word	0x08003141
 8003068:	08003095 	.word	0x08003095
 800306c:	0800315f 	.word	0x0800315f
 8003070:	ffffbfff 	.word	0xffffbfff

08003074 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a2:	f7fe fbd3 	bl	800184c <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2220      	movs	r2, #32
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d03c      	beq.n	8003132 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2120      	movs	r1, #32
 80030c4:	438a      	bics	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2102      	movs	r1, #2
 80030d4:	438a      	bics	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2164      	movs	r1, #100	@ 0x64
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 f98e 	bl	8003400 <SPI_EndRxTxTransaction>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d005      	beq.n	80030f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	2220      	movs	r2, #32
 80030ee:	431a      	orrs	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	225d      	movs	r2, #93	@ 0x5d
 800311c:	2101      	movs	r1, #1
 800311e:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	0018      	movs	r0, r3
 800312c:	f7ff ffaa 	bl	8003084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003130:	e003      	b.n	800313a <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	0018      	movs	r0, r3
 8003136:	f7fd f87b 	bl	8000230 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800313a:	46bd      	mov	sp, r7
 800313c:	b006      	add	sp, #24
 800313e:	bd80      	pop	{r7, pc}

08003140 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff ff8f 	bl	8003074 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}

0800315e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2103      	movs	r1, #3
 8003178:	438a      	bics	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003180:	2210      	movs	r2, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	225d      	movs	r2, #93	@ 0x5d
 800318c:	2101      	movs	r1, #1
 800318e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff ff76 	bl	8003084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}

080031a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b0:	f7fe fb4c 	bl	800184c <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	18d3      	adds	r3, r2, r3
 80031be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c0:	f7fe fb44 	bl	800184c <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c8:	4b3a      	ldr	r3, [pc, #232]	@ (80032b4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	015b      	lsls	r3, r3, #5
 80031ce:	0d1b      	lsrs	r3, r3, #20
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	4353      	muls	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	e058      	b.n	800328a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	d055      	beq.n	800328a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031de:	f7fe fb35 	bl	800184c <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d902      	bls.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d142      	bne.n	800327a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	21e0      	movs	r1, #224	@ 0xe0
 8003200:	438a      	bics	r2, r1
 8003202:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	2382      	movs	r3, #130	@ 0x82
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	429a      	cmp	r2, r3
 800320e:	d113      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	429a      	cmp	r2, r3
 800321a:	d005      	beq.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2140      	movs	r1, #64	@ 0x40
 8003234:	438a      	bics	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	019b      	lsls	r3, r3, #6
 8003240:	429a      	cmp	r2, r3
 8003242:	d110      	bne.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	491a      	ldr	r1, [pc, #104]	@ (80032b8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003250:	400a      	ands	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2180      	movs	r1, #128	@ 0x80
 8003260:	0189      	lsls	r1, r1, #6
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	225d      	movs	r2, #93	@ 0x5d
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	225c      	movs	r2, #92	@ 0x5c
 8003272:	2100      	movs	r1, #0
 8003274:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e017      	b.n	80032aa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3b01      	subs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	425a      	negs	r2, r3
 800329a:	4153      	adcs	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	001a      	movs	r2, r3
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d197      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b008      	add	sp, #32
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	20002a90 	.word	0x20002a90
 80032b8:	ffffdfff 	.word	0xffffdfff

080032bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	@ 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032ca:	2317      	movs	r3, #23
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d2:	f7fe fabb 	bl	800184c <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	18d3      	adds	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80032e2:	f7fe fab3 	bl	800184c <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032f2:	4b41      	ldr	r3, [pc, #260]	@ (80033f8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	0013      	movs	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	00da      	lsls	r2, r3, #3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	0d1b      	lsrs	r3, r3, #20
 8003302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003304:	4353      	muls	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003308:	e068      	b.n	80033dc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	23c0      	movs	r3, #192	@ 0xc0
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	429a      	cmp	r2, r3
 8003312:	d10a      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	2117      	movs	r1, #23
 8003322:	187b      	adds	r3, r7, r1
 8003324:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003326:	187b      	adds	r3, r7, r1
 8003328:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	d055      	beq.n	80033dc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003330:	f7fe fa8c 	bl	800184c <HAL_GetTick>
 8003334:	0002      	movs	r2, r0
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333c:	429a      	cmp	r2, r3
 800333e:	d902      	bls.n	8003346 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d142      	bne.n	80033cc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	21e0      	movs	r1, #224	@ 0xe0
 8003352:	438a      	bics	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	2382      	movs	r3, #130	@ 0x82
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	429a      	cmp	r2, r3
 8003360:	d113      	bne.n	800338a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	429a      	cmp	r2, r3
 800336c:	d005      	beq.n	800337a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	429a      	cmp	r2, r3
 8003378:	d107      	bne.n	800338a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2140      	movs	r1, #64	@ 0x40
 8003386:	438a      	bics	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	429a      	cmp	r2, r3
 8003394:	d110      	bne.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4916      	ldr	r1, [pc, #88]	@ (80033fc <SPI_WaitFifoStateUntilTimeout+0x140>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	0189      	lsls	r1, r1, #6
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	225d      	movs	r2, #93	@ 0x5d
 80033bc:	2101      	movs	r1, #1
 80033be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	225c      	movs	r2, #92	@ 0x5c
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e010      	b.n	80033ee <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3b01      	subs	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d18e      	bne.n	800330a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b00a      	add	sp, #40	@ 0x28
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	20002a90 	.word	0x20002a90
 80033fc:	ffffdfff 	.word	0xffffdfff

08003400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	23c0      	movs	r3, #192	@ 0xc0
 8003410:	0159      	lsls	r1, r3, #5
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	0013      	movs	r3, r2
 800341a:	2200      	movs	r2, #0
 800341c:	f7ff ff4e 	bl	80032bc <SPI_WaitFifoStateUntilTimeout>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d007      	beq.n	8003434 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003428:	2220      	movs	r2, #32
 800342a:	431a      	orrs	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e027      	b.n	8003484 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	0013      	movs	r3, r2
 800343e:	2200      	movs	r2, #0
 8003440:	2180      	movs	r1, #128	@ 0x80
 8003442:	f7ff fead 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d007      	beq.n	800345a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344e:	2220      	movs	r2, #32
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e014      	b.n	8003484 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	23c0      	movs	r3, #192	@ 0xc0
 800345e:	00d9      	lsls	r1, r3, #3
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	0013      	movs	r3, r2
 8003468:	2200      	movs	r2, #0
 800346a:	f7ff ff27 	bl	80032bc <SPI_WaitFifoStateUntilTimeout>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d007      	beq.n	8003482 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	2220      	movs	r2, #32
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e000      	b.n	8003484 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e042      	b.n	8003524 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223d      	movs	r2, #61	@ 0x3d
 80034a2:	5c9b      	ldrb	r3, [r3, r2]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223c      	movs	r2, #60	@ 0x3c
 80034ae:	2100      	movs	r1, #0
 80034b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7fe f8e5 	bl	8001684 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	223d      	movs	r2, #61	@ 0x3d
 80034be:	2102      	movs	r1, #2
 80034c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	0019      	movs	r1, r3
 80034cc:	0010      	movs	r0, r2
 80034ce:	f000 f9ab 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2246      	movs	r2, #70	@ 0x46
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	223e      	movs	r2, #62	@ 0x3e
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	223f      	movs	r2, #63	@ 0x3f
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2240      	movs	r2, #64	@ 0x40
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2241      	movs	r2, #65	@ 0x41
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2242      	movs	r2, #66	@ 0x42
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2243      	movs	r2, #67	@ 0x43
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2244      	movs	r2, #68	@ 0x44
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2245      	movs	r2, #69	@ 0x45
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223d      	movs	r2, #61	@ 0x3d
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <HAL_TIM_PWM_Start+0x22>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223e      	movs	r2, #62	@ 0x3e
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	1e5a      	subs	r2, r3, #1
 8003548:	4193      	sbcs	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e01f      	b.n	800358e <HAL_TIM_PWM_Start+0x62>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d108      	bne.n	8003566 <HAL_TIM_PWM_Start+0x3a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	223f      	movs	r2, #63	@ 0x3f
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	4193      	sbcs	r3, r2
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e013      	b.n	800358e <HAL_TIM_PWM_Start+0x62>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d108      	bne.n	800357e <HAL_TIM_PWM_Start+0x52>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	5c9b      	ldrb	r3, [r3, r2]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	4193      	sbcs	r3, r2
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e007      	b.n	800358e <HAL_TIM_PWM_Start+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2241      	movs	r2, #65	@ 0x41
 8003582:	5c9b      	ldrb	r3, [r3, r2]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	4193      	sbcs	r3, r2
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e074      	b.n	8003680 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_PWM_Start+0x7a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	223e      	movs	r2, #62	@ 0x3e
 80035a0:	2102      	movs	r1, #2
 80035a2:	5499      	strb	r1, [r3, r2]
 80035a4:	e013      	b.n	80035ce <HAL_TIM_PWM_Start+0xa2>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x8a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	223f      	movs	r2, #63	@ 0x3f
 80035b0:	2102      	movs	r1, #2
 80035b2:	5499      	strb	r1, [r3, r2]
 80035b4:	e00b      	b.n	80035ce <HAL_TIM_PWM_Start+0xa2>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0x9a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2240      	movs	r2, #64	@ 0x40
 80035c0:	2102      	movs	r1, #2
 80035c2:	5499      	strb	r1, [r3, r2]
 80035c4:	e003      	b.n	80035ce <HAL_TIM_PWM_Start+0xa2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2241      	movs	r2, #65	@ 0x41
 80035ca:	2102      	movs	r1, #2
 80035cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6839      	ldr	r1, [r7, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 fbb0 	bl	8003d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a29      	ldr	r2, [pc, #164]	@ (8003688 <HAL_TIM_PWM_Start+0x15c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_PWM_Start+0xd8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a28      	ldr	r2, [pc, #160]	@ (800368c <HAL_TIM_PWM_Start+0x160>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_PWM_Start+0xd8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a26      	ldr	r2, [pc, #152]	@ (8003690 <HAL_TIM_PWM_Start+0x164>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_PWM_Start+0xd8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <HAL_TIM_PWM_Start+0x168>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_TIM_PWM_Start+0xdc>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_TIM_PWM_Start+0xde>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2180      	movs	r1, #128	@ 0x80
 800361a:	0209      	lsls	r1, r1, #8
 800361c:	430a      	orrs	r2, r1
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_TIM_PWM_Start+0x15c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00f      	beq.n	800364a <HAL_TIM_PWM_Start+0x11e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	05db      	lsls	r3, r3, #23
 8003632:	429a      	cmp	r2, r3
 8003634:	d009      	beq.n	800364a <HAL_TIM_PWM_Start+0x11e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <HAL_TIM_PWM_Start+0x16c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIM_PWM_Start+0x11e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a11      	ldr	r2, [pc, #68]	@ (800368c <HAL_TIM_PWM_Start+0x160>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d111      	bne.n	800366e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2207      	movs	r2, #7
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d010      	beq.n	800367e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	e007      	b.n	800367e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2101      	movs	r1, #1
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800
 8003698:	40000400 	.word	0x40000400

0800369c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2317      	movs	r3, #23
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	223c      	movs	r2, #60	@ 0x3c
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_TIM_PWM_ConfigChannel+0x22>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e0ad      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	223c      	movs	r2, #60	@ 0x3c
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d100      	bne.n	80036ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80036cc:	e076      	b.n	80037bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d900      	bls.n	80036d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80036d4:	e095      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x166>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d04e      	beq.n	800377a <HAL_TIM_PWM_ConfigChannel+0xde>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d900      	bls.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80036e2:	e08e      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x166>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d021      	beq.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x98>
 80036f0:	e087      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f922 	bl	8003944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2108      	movs	r1, #8
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2104      	movs	r1, #4
 800371c:	438a      	bics	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6999      	ldr	r1, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	619a      	str	r2, [r3, #24]
      break;
 8003732:	e06b      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	0011      	movs	r1, r2
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f989 	bl	8003a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2180      	movs	r1, #128	@ 0x80
 800374e:	0109      	lsls	r1, r1, #4
 8003750:	430a      	orrs	r2, r1
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4931      	ldr	r1, [pc, #196]	@ (8003824 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003760:	400a      	ands	r2, r1
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	619a      	str	r2, [r3, #24]
      break;
 8003778:	e048      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f000 f9ea 	bl	8003b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2108      	movs	r1, #8
 8003794:	430a      	orrs	r2, r1
 8003796:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2104      	movs	r1, #4
 80037a4:	438a      	bics	r2, r1
 80037a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69d9      	ldr	r1, [r3, #28]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	61da      	str	r2, [r3, #28]
      break;
 80037ba:	e027      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fa4f 	bl	8003c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2180      	movs	r1, #128	@ 0x80
 80037d6:	0109      	lsls	r1, r1, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	490f      	ldr	r1, [pc, #60]	@ (8003824 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69d9      	ldr	r1, [r3, #28]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	021a      	lsls	r2, r3, #8
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	61da      	str	r2, [r3, #28]
      break;
 8003800:	e004      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003802:	2317      	movs	r3, #23
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
      break;
 800380a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	223c      	movs	r2, #60	@ 0x3c
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

  return status;
 8003814:	2317      	movs	r3, #23
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	781b      	ldrb	r3, [r3, #0]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	fffffbff 	.word	0xfffffbff

08003828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a3b      	ldr	r2, [pc, #236]	@ (8003928 <TIM_Base_SetConfig+0x100>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d008      	beq.n	8003852 <TIM_Base_SetConfig+0x2a>
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	2380      	movs	r3, #128	@ 0x80
 8003844:	05db      	lsls	r3, r3, #23
 8003846:	429a      	cmp	r2, r3
 8003848:	d003      	beq.n	8003852 <TIM_Base_SetConfig+0x2a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a37      	ldr	r2, [pc, #220]	@ (800392c <TIM_Base_SetConfig+0x104>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d108      	bne.n	8003864 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2270      	movs	r2, #112	@ 0x70
 8003856:	4393      	bics	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a30      	ldr	r2, [pc, #192]	@ (8003928 <TIM_Base_SetConfig+0x100>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <TIM_Base_SetConfig+0x76>
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	05db      	lsls	r3, r3, #23
 8003872:	429a      	cmp	r2, r3
 8003874:	d013      	beq.n	800389e <TIM_Base_SetConfig+0x76>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2c      	ldr	r2, [pc, #176]	@ (800392c <TIM_Base_SetConfig+0x104>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00f      	beq.n	800389e <TIM_Base_SetConfig+0x76>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2b      	ldr	r2, [pc, #172]	@ (8003930 <TIM_Base_SetConfig+0x108>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00b      	beq.n	800389e <TIM_Base_SetConfig+0x76>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2a      	ldr	r2, [pc, #168]	@ (8003934 <TIM_Base_SetConfig+0x10c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <TIM_Base_SetConfig+0x76>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <TIM_Base_SetConfig+0x110>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_Base_SetConfig+0x76>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a28      	ldr	r2, [pc, #160]	@ (800393c <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a27      	ldr	r2, [pc, #156]	@ (8003940 <TIM_Base_SetConfig+0x118>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	4393      	bics	r3, r2
 80038b6:	001a      	movs	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a13      	ldr	r2, [pc, #76]	@ (8003928 <TIM_Base_SetConfig+0x100>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xce>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a14      	ldr	r2, [pc, #80]	@ (8003934 <TIM_Base_SetConfig+0x10c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xce>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a13      	ldr	r2, [pc, #76]	@ (8003938 <TIM_Base_SetConfig+0x110>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xce>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a12      	ldr	r2, [pc, #72]	@ (800393c <TIM_Base_SetConfig+0x114>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d103      	bne.n	80038fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2201      	movs	r2, #1
 800390a:	4013      	ands	r3, r2
 800390c:	2b01      	cmp	r3, #1
 800390e:	d106      	bne.n	800391e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2201      	movs	r2, #1
 8003916:	4393      	bics	r3, r2
 8003918:	001a      	movs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]
  }
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40000400 	.word	0x40000400
 8003930:	40002000 	.word	0x40002000
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800
 8003940:	fffffcff 	.word	0xfffffcff

08003944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2201      	movs	r2, #1
 800395a:	4393      	bics	r3, r2
 800395c:	001a      	movs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2270      	movs	r2, #112	@ 0x70
 8003972:	4393      	bics	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	4393      	bics	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2202      	movs	r2, #2
 800398c:	4393      	bics	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <TIM_OC1_SetConfig+0xf8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00b      	beq.n	80039ba <TIM_OC1_SetConfig+0x76>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	@ (8003a40 <TIM_OC1_SetConfig+0xfc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <TIM_OC1_SetConfig+0x76>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	@ (8003a44 <TIM_OC1_SetConfig+0x100>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_OC1_SetConfig+0x76>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	@ (8003a48 <TIM_OC1_SetConfig+0x104>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d10c      	bne.n	80039d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2208      	movs	r2, #8
 80039be:	4393      	bics	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2204      	movs	r2, #4
 80039d0:	4393      	bics	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a19      	ldr	r2, [pc, #100]	@ (8003a3c <TIM_OC1_SetConfig+0xf8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00b      	beq.n	80039f4 <TIM_OC1_SetConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a18      	ldr	r2, [pc, #96]	@ (8003a40 <TIM_OC1_SetConfig+0xfc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_OC1_SetConfig+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <TIM_OC1_SetConfig+0x100>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_OC1_SetConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <TIM_OC1_SetConfig+0x104>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d111      	bne.n	8003a18 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4a15      	ldr	r2, [pc, #84]	@ (8003a4c <TIM_OC1_SetConfig+0x108>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <TIM_OC1_SetConfig+0x10c>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b006      	add	sp, #24
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800
 8003a4c:	fffffeff 	.word	0xfffffeff
 8003a50:	fffffdff 	.word	0xfffffdff

08003a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a2e      	ldr	r2, [pc, #184]	@ (8003b3c <TIM_OC2_SetConfig+0xe8>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a2d      	ldr	r2, [pc, #180]	@ (8003b40 <TIM_OC2_SetConfig+0xec>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <TIM_OC2_SetConfig+0xf0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10d      	bne.n	8003ad2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2280      	movs	r2, #128	@ 0x80
 8003aba:	4393      	bics	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2240      	movs	r2, #64	@ 0x40
 8003ace:	4393      	bics	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b44 <TIM_OC2_SetConfig+0xf0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <TIM_OC2_SetConfig+0x9e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b48 <TIM_OC2_SetConfig+0xf4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <TIM_OC2_SetConfig+0x9e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <TIM_OC2_SetConfig+0xf8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_OC2_SetConfig+0x9e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <TIM_OC2_SetConfig+0xfc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d113      	bne.n	8003b1a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <TIM_OC2_SetConfig+0x100>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <TIM_OC2_SetConfig+0x104>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b006      	add	sp, #24
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	ffff8fff 	.word	0xffff8fff
 8003b40:	fffffcff 	.word	0xfffffcff
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800
 8003b54:	fffffbff 	.word	0xfffffbff
 8003b58:	fffff7ff 	.word	0xfffff7ff

08003b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a33      	ldr	r2, [pc, #204]	@ (8003c40 <TIM_OC3_SetConfig+0xe4>)
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2270      	movs	r2, #112	@ 0x70
 8003b88:	4393      	bics	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4393      	bics	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	@ (8003c44 <TIM_OC3_SetConfig+0xe8>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <TIM_OC3_SetConfig+0xec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10d      	bne.n	8003bd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	@ (8003c4c <TIM_OC3_SetConfig+0xf0>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <TIM_OC3_SetConfig+0xf4>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <TIM_OC3_SetConfig+0xec>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_OC3_SetConfig+0x9a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <TIM_OC3_SetConfig+0xf8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_OC3_SetConfig+0x9a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <TIM_OC3_SetConfig+0xfc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC3_SetConfig+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c5c <TIM_OC3_SetConfig+0x100>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d113      	bne.n	8003c1e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a19      	ldr	r2, [pc, #100]	@ (8003c60 <TIM_OC3_SetConfig+0x104>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4a18      	ldr	r2, [pc, #96]	@ (8003c64 <TIM_OC3_SetConfig+0x108>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	fffffeff 	.word	0xfffffeff
 8003c44:	fffffdff 	.word	0xfffffdff
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	fffff7ff 	.word	0xfffff7ff
 8003c50:	fffffbff 	.word	0xfffffbff
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	ffffefff 	.word	0xffffefff
 8003c64:	ffffdfff 	.word	0xffffdfff

08003c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	@ (8003d18 <TIM_OC4_SetConfig+0xb0>)
 8003c7e:	401a      	ands	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <TIM_OC4_SetConfig+0xb4>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a21      	ldr	r2, [pc, #132]	@ (8003d20 <TIM_OC4_SetConfig+0xb8>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <TIM_OC4_SetConfig+0xbc>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a19      	ldr	r2, [pc, #100]	@ (8003d28 <TIM_OC4_SetConfig+0xc0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x78>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <TIM_OC4_SetConfig+0xc4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x78>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <TIM_OC4_SetConfig+0xc8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x78>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a16      	ldr	r2, [pc, #88]	@ (8003d34 <TIM_OC4_SetConfig+0xcc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <TIM_OC4_SetConfig+0xd0>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b006      	add	sp, #24
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	ffffefff 	.word	0xffffefff
 8003d1c:	ffff8fff 	.word	0xffff8fff
 8003d20:	fffffcff 	.word	0xfffffcff
 8003d24:	ffffdfff 	.word	0xffffdfff
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	ffffbfff 	.word	0xffffbfff

08003d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	221f      	movs	r2, #31
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2201      	movs	r2, #1
 8003d50:	409a      	lsls	r2, r3
 8003d52:	0013      	movs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	43d2      	mvns	r2, r2
 8003d5e:	401a      	ands	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	211f      	movs	r1, #31
 8003d6c:	400b      	ands	r3, r1
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4099      	lsls	r1, r3
 8003d72:	000b      	movs	r3, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b006      	add	sp, #24
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223c      	movs	r2, #60	@ 0x3c
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e047      	b.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	223c      	movs	r2, #60	@ 0x3c
 8003da0:	2101      	movs	r1, #1
 8003da2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223d      	movs	r2, #61	@ 0x3d
 8003da8:	2102      	movs	r1, #2
 8003daa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2270      	movs	r2, #112	@ 0x70
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00f      	beq.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	05db      	lsls	r3, r3, #23
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d009      	beq.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a11      	ldr	r2, [pc, #68]	@ (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10c      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2280      	movs	r2, #128	@ 0x80
 8003e04:	4393      	bics	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223d      	movs	r2, #61	@ 0x3d
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	223c      	movs	r2, #60	@ 0x3c
 8003e26:	2100      	movs	r1, #0
 8003e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b004      	add	sp, #16
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40014000 	.word	0x40014000

08003e40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223c      	movs	r2, #60	@ 0x3c
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e03e      	b.n	8003eda <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	223c      	movs	r2, #60	@ 0x3c
 8003e60:	2101      	movs	r1, #1
 8003e62:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22ff      	movs	r2, #255	@ 0xff
 8003e68:	4393      	bics	r3, r2
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e78:	401a      	ands	r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a18      	ldr	r2, [pc, #96]	@ (8003ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003e86:	401a      	ands	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003e94:	401a      	ands	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	223c      	movs	r2, #60	@ 0x3c
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	fffffcff 	.word	0xfffffcff
 8003ee8:	fffffbff 	.word	0xfffffbff
 8003eec:	fffff7ff 	.word	0xfffff7ff
 8003ef0:	ffffefff 	.word	0xffffefff
 8003ef4:	ffffdfff 	.word	0xffffdfff
 8003ef8:	ffffbfff 	.word	0xffffbfff

08003efc <__assert_func>:
 8003efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003efe:	0014      	movs	r4, r2
 8003f00:	001a      	movs	r2, r3
 8003f02:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <__assert_func+0x2c>)
 8003f04:	0005      	movs	r5, r0
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	000e      	movs	r6, r1
 8003f0a:	68d8      	ldr	r0, [r3, #12]
 8003f0c:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <__assert_func+0x30>)
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	d101      	bne.n	8003f16 <__assert_func+0x1a>
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <__assert_func+0x34>)
 8003f14:	001c      	movs	r4, r3
 8003f16:	4907      	ldr	r1, [pc, #28]	@ (8003f34 <__assert_func+0x38>)
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	9402      	str	r4, [sp, #8]
 8003f1c:	002b      	movs	r3, r5
 8003f1e:	9600      	str	r6, [sp, #0]
 8003f20:	f000 f8b2 	bl	8004088 <fiprintf>
 8003f24:	f000 f9ab 	bl	800427e <abort>
 8003f28:	20002aa8 	.word	0x20002aa8
 8003f2c:	08004fb4 	.word	0x08004fb4
 8003f30:	08004fef 	.word	0x08004fef
 8003f34:	08004fc1 	.word	0x08004fc1

08003f38 <std>:
 8003f38:	2300      	movs	r3, #0
 8003f3a:	b510      	push	{r4, lr}
 8003f3c:	0004      	movs	r4, r0
 8003f3e:	6003      	str	r3, [r0, #0]
 8003f40:	6043      	str	r3, [r0, #4]
 8003f42:	6083      	str	r3, [r0, #8]
 8003f44:	8181      	strh	r1, [r0, #12]
 8003f46:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f48:	81c2      	strh	r2, [r0, #14]
 8003f4a:	6103      	str	r3, [r0, #16]
 8003f4c:	6143      	str	r3, [r0, #20]
 8003f4e:	6183      	str	r3, [r0, #24]
 8003f50:	0019      	movs	r1, r3
 8003f52:	2208      	movs	r2, #8
 8003f54:	305c      	adds	r0, #92	@ 0x5c
 8003f56:	f000 f90f 	bl	8004178 <memset>
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <std+0x50>)
 8003f5c:	6224      	str	r4, [r4, #32]
 8003f5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f60:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <std+0x54>)
 8003f62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f64:	4b0a      	ldr	r3, [pc, #40]	@ (8003f90 <std+0x58>)
 8003f66:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <std+0x5c>)
 8003f6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <std+0x60>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	d005      	beq.n	8003f7e <std+0x46>
 8003f72:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <std+0x64>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d002      	beq.n	8003f7e <std+0x46>
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <std+0x68>)
 8003f7a:	429c      	cmp	r4, r3
 8003f7c:	d103      	bne.n	8003f86 <std+0x4e>
 8003f7e:	0020      	movs	r0, r4
 8003f80:	3058      	adds	r0, #88	@ 0x58
 8003f82:	f000 f979 	bl	8004278 <__retarget_lock_init_recursive>
 8003f86:	bd10      	pop	{r4, pc}
 8003f88:	080040e1 	.word	0x080040e1
 8003f8c:	08004109 	.word	0x08004109
 8003f90:	08004141 	.word	0x08004141
 8003f94:	0800416d 	.word	0x0800416d
 8003f98:	200033e0 	.word	0x200033e0
 8003f9c:	20003448 	.word	0x20003448
 8003fa0:	200034b0 	.word	0x200034b0

08003fa4 <stdio_exit_handler>:
 8003fa4:	b510      	push	{r4, lr}
 8003fa6:	4a03      	ldr	r2, [pc, #12]	@ (8003fb4 <stdio_exit_handler+0x10>)
 8003fa8:	4903      	ldr	r1, [pc, #12]	@ (8003fb8 <stdio_exit_handler+0x14>)
 8003faa:	4804      	ldr	r0, [pc, #16]	@ (8003fbc <stdio_exit_handler+0x18>)
 8003fac:	f000 f87c 	bl	80040a8 <_fwalk_sglue>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	20002a9c 	.word	0x20002a9c
 8003fb8:	08004b11 	.word	0x08004b11
 8003fbc:	20002aac 	.word	0x20002aac

08003fc0 <cleanup_stdio>:
 8003fc0:	6841      	ldr	r1, [r0, #4]
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <cleanup_stdio+0x30>)
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	0004      	movs	r4, r0
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d001      	beq.n	8003fd0 <cleanup_stdio+0x10>
 8003fcc:	f000 fda0 	bl	8004b10 <_fflush_r>
 8003fd0:	68a1      	ldr	r1, [r4, #8]
 8003fd2:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <cleanup_stdio+0x34>)
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d002      	beq.n	8003fde <cleanup_stdio+0x1e>
 8003fd8:	0020      	movs	r0, r4
 8003fda:	f000 fd99 	bl	8004b10 <_fflush_r>
 8003fde:	68e1      	ldr	r1, [r4, #12]
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <cleanup_stdio+0x38>)
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	d002      	beq.n	8003fec <cleanup_stdio+0x2c>
 8003fe6:	0020      	movs	r0, r4
 8003fe8:	f000 fd92 	bl	8004b10 <_fflush_r>
 8003fec:	bd10      	pop	{r4, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	200033e0 	.word	0x200033e0
 8003ff4:	20003448 	.word	0x20003448
 8003ff8:	200034b0 	.word	0x200034b0

08003ffc <global_stdio_init.part.0>:
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <global_stdio_init.part.0+0x28>)
 8004000:	4a09      	ldr	r2, [pc, #36]	@ (8004028 <global_stdio_init.part.0+0x2c>)
 8004002:	2104      	movs	r1, #4
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	4809      	ldr	r0, [pc, #36]	@ (800402c <global_stdio_init.part.0+0x30>)
 8004008:	2200      	movs	r2, #0
 800400a:	f7ff ff95 	bl	8003f38 <std>
 800400e:	2201      	movs	r2, #1
 8004010:	2109      	movs	r1, #9
 8004012:	4807      	ldr	r0, [pc, #28]	@ (8004030 <global_stdio_init.part.0+0x34>)
 8004014:	f7ff ff90 	bl	8003f38 <std>
 8004018:	2202      	movs	r2, #2
 800401a:	2112      	movs	r1, #18
 800401c:	4805      	ldr	r0, [pc, #20]	@ (8004034 <global_stdio_init.part.0+0x38>)
 800401e:	f7ff ff8b 	bl	8003f38 <std>
 8004022:	bd10      	pop	{r4, pc}
 8004024:	20003518 	.word	0x20003518
 8004028:	08003fa5 	.word	0x08003fa5
 800402c:	200033e0 	.word	0x200033e0
 8004030:	20003448 	.word	0x20003448
 8004034:	200034b0 	.word	0x200034b0

08004038 <__sfp_lock_acquire>:
 8004038:	b510      	push	{r4, lr}
 800403a:	4802      	ldr	r0, [pc, #8]	@ (8004044 <__sfp_lock_acquire+0xc>)
 800403c:	f000 f91d 	bl	800427a <__retarget_lock_acquire_recursive>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	20003521 	.word	0x20003521

08004048 <__sfp_lock_release>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4802      	ldr	r0, [pc, #8]	@ (8004054 <__sfp_lock_release+0xc>)
 800404c:	f000 f916 	bl	800427c <__retarget_lock_release_recursive>
 8004050:	bd10      	pop	{r4, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	20003521 	.word	0x20003521

08004058 <__sinit>:
 8004058:	b510      	push	{r4, lr}
 800405a:	0004      	movs	r4, r0
 800405c:	f7ff ffec 	bl	8004038 <__sfp_lock_acquire>
 8004060:	6a23      	ldr	r3, [r4, #32]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <__sinit+0x14>
 8004066:	f7ff ffef 	bl	8004048 <__sfp_lock_release>
 800406a:	bd10      	pop	{r4, pc}
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <__sinit+0x28>)
 800406e:	6223      	str	r3, [r4, #32]
 8004070:	4b04      	ldr	r3, [pc, #16]	@ (8004084 <__sinit+0x2c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f6      	bne.n	8004066 <__sinit+0xe>
 8004078:	f7ff ffc0 	bl	8003ffc <global_stdio_init.part.0>
 800407c:	e7f3      	b.n	8004066 <__sinit+0xe>
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	08003fc1 	.word	0x08003fc1
 8004084:	20003518 	.word	0x20003518

08004088 <fiprintf>:
 8004088:	b40e      	push	{r1, r2, r3}
 800408a:	b517      	push	{r0, r1, r2, r4, lr}
 800408c:	4c05      	ldr	r4, [pc, #20]	@ (80040a4 <fiprintf+0x1c>)
 800408e:	ab05      	add	r3, sp, #20
 8004090:	cb04      	ldmia	r3!, {r2}
 8004092:	0001      	movs	r1, r0
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	f000 fa1c 	bl	80044d4 <_vfiprintf_r>
 800409c:	bc1e      	pop	{r1, r2, r3, r4}
 800409e:	bc08      	pop	{r3}
 80040a0:	b003      	add	sp, #12
 80040a2:	4718      	bx	r3
 80040a4:	20002aa8 	.word	0x20002aa8

080040a8 <_fwalk_sglue>:
 80040a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040aa:	0014      	movs	r4, r2
 80040ac:	2600      	movs	r6, #0
 80040ae:	9000      	str	r0, [sp, #0]
 80040b0:	9101      	str	r1, [sp, #4]
 80040b2:	68a5      	ldr	r5, [r4, #8]
 80040b4:	6867      	ldr	r7, [r4, #4]
 80040b6:	3f01      	subs	r7, #1
 80040b8:	d504      	bpl.n	80040c4 <_fwalk_sglue+0x1c>
 80040ba:	6824      	ldr	r4, [r4, #0]
 80040bc:	2c00      	cmp	r4, #0
 80040be:	d1f8      	bne.n	80040b2 <_fwalk_sglue+0xa>
 80040c0:	0030      	movs	r0, r6
 80040c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040c4:	89ab      	ldrh	r3, [r5, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d908      	bls.n	80040dc <_fwalk_sglue+0x34>
 80040ca:	220e      	movs	r2, #14
 80040cc:	5eab      	ldrsh	r3, [r5, r2]
 80040ce:	3301      	adds	r3, #1
 80040d0:	d004      	beq.n	80040dc <_fwalk_sglue+0x34>
 80040d2:	0029      	movs	r1, r5
 80040d4:	9800      	ldr	r0, [sp, #0]
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	4798      	blx	r3
 80040da:	4306      	orrs	r6, r0
 80040dc:	3568      	adds	r5, #104	@ 0x68
 80040de:	e7ea      	b.n	80040b6 <_fwalk_sglue+0xe>

080040e0 <__sread>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	000c      	movs	r4, r1
 80040e4:	250e      	movs	r5, #14
 80040e6:	5f49      	ldrsh	r1, [r1, r5]
 80040e8:	f000 f874 	bl	80041d4 <_read_r>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	db03      	blt.n	80040f8 <__sread+0x18>
 80040f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040f2:	181b      	adds	r3, r3, r0
 80040f4:	6563      	str	r3, [r4, #84]	@ 0x54
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	4a02      	ldr	r2, [pc, #8]	@ (8004104 <__sread+0x24>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	e7f9      	b.n	80040f6 <__sread+0x16>
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	ffffefff 	.word	0xffffefff

08004108 <__swrite>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	001f      	movs	r7, r3
 800410c:	898b      	ldrh	r3, [r1, #12]
 800410e:	0005      	movs	r5, r0
 8004110:	000c      	movs	r4, r1
 8004112:	0016      	movs	r6, r2
 8004114:	05db      	lsls	r3, r3, #23
 8004116:	d505      	bpl.n	8004124 <__swrite+0x1c>
 8004118:	230e      	movs	r3, #14
 800411a:	5ec9      	ldrsh	r1, [r1, r3]
 800411c:	2200      	movs	r2, #0
 800411e:	2302      	movs	r3, #2
 8004120:	f000 f844 	bl	80041ac <_lseek_r>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	4a05      	ldr	r2, [pc, #20]	@ (800413c <__swrite+0x34>)
 8004128:	0028      	movs	r0, r5
 800412a:	4013      	ands	r3, r2
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	0032      	movs	r2, r6
 8004130:	230e      	movs	r3, #14
 8004132:	5ee1      	ldrsh	r1, [r4, r3]
 8004134:	003b      	movs	r3, r7
 8004136:	f000 f861 	bl	80041fc <_write_r>
 800413a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800413c:	ffffefff 	.word	0xffffefff

08004140 <__sseek>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	000c      	movs	r4, r1
 8004144:	250e      	movs	r5, #14
 8004146:	5f49      	ldrsh	r1, [r1, r5]
 8004148:	f000 f830 	bl	80041ac <_lseek_r>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	1c42      	adds	r2, r0, #1
 8004150:	d103      	bne.n	800415a <__sseek+0x1a>
 8004152:	4a05      	ldr	r2, [pc, #20]	@ (8004168 <__sseek+0x28>)
 8004154:	4013      	ands	r3, r2
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	bd70      	pop	{r4, r5, r6, pc}
 800415a:	2280      	movs	r2, #128	@ 0x80
 800415c:	0152      	lsls	r2, r2, #5
 800415e:	4313      	orrs	r3, r2
 8004160:	81a3      	strh	r3, [r4, #12]
 8004162:	6560      	str	r0, [r4, #84]	@ 0x54
 8004164:	e7f8      	b.n	8004158 <__sseek+0x18>
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	ffffefff 	.word	0xffffefff

0800416c <__sclose>:
 800416c:	b510      	push	{r4, lr}
 800416e:	230e      	movs	r3, #14
 8004170:	5ec9      	ldrsh	r1, [r1, r3]
 8004172:	f000 f809 	bl	8004188 <_close_r>
 8004176:	bd10      	pop	{r4, pc}

08004178 <memset>:
 8004178:	0003      	movs	r3, r0
 800417a:	1882      	adds	r2, r0, r2
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	7019      	strb	r1, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <_close_r>:
 8004188:	2300      	movs	r3, #0
 800418a:	b570      	push	{r4, r5, r6, lr}
 800418c:	4d06      	ldr	r5, [pc, #24]	@ (80041a8 <_close_r+0x20>)
 800418e:	0004      	movs	r4, r0
 8004190:	0008      	movs	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fd f976 	bl	8001484 <_close>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d103      	bne.n	80041a4 <_close_r+0x1c>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d000      	beq.n	80041a4 <_close_r+0x1c>
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	bd70      	pop	{r4, r5, r6, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	2000351c 	.word	0x2000351c

080041ac <_lseek_r>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	0004      	movs	r4, r0
 80041b0:	0008      	movs	r0, r1
 80041b2:	0011      	movs	r1, r2
 80041b4:	001a      	movs	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	4d05      	ldr	r5, [pc, #20]	@ (80041d0 <_lseek_r+0x24>)
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f7fd f983 	bl	80014c6 <_lseek>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d103      	bne.n	80041cc <_lseek_r+0x20>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d000      	beq.n	80041cc <_lseek_r+0x20>
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	2000351c 	.word	0x2000351c

080041d4 <_read_r>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	0004      	movs	r4, r0
 80041d8:	0008      	movs	r0, r1
 80041da:	0011      	movs	r1, r2
 80041dc:	001a      	movs	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	4d05      	ldr	r5, [pc, #20]	@ (80041f8 <_read_r+0x24>)
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f7fd f915 	bl	8001412 <_read>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d103      	bne.n	80041f4 <_read_r+0x20>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d000      	beq.n	80041f4 <_read_r+0x20>
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	2000351c 	.word	0x2000351c

080041fc <_write_r>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	0004      	movs	r4, r0
 8004200:	0008      	movs	r0, r1
 8004202:	0011      	movs	r1, r2
 8004204:	001a      	movs	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	4d05      	ldr	r5, [pc, #20]	@ (8004220 <_write_r+0x24>)
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	f7fd f91e 	bl	800144c <_write>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d103      	bne.n	800421c <_write_r+0x20>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d000      	beq.n	800421c <_write_r+0x20>
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	bd70      	pop	{r4, r5, r6, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	2000351c 	.word	0x2000351c

08004224 <__errno>:
 8004224:	4b01      	ldr	r3, [pc, #4]	@ (800422c <__errno+0x8>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4770      	bx	lr
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	20002aa8 	.word	0x20002aa8

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	2600      	movs	r6, #0
 8004234:	4c0c      	ldr	r4, [pc, #48]	@ (8004268 <__libc_init_array+0x38>)
 8004236:	4d0d      	ldr	r5, [pc, #52]	@ (800426c <__libc_init_array+0x3c>)
 8004238:	1b64      	subs	r4, r4, r5
 800423a:	10a4      	asrs	r4, r4, #2
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	2600      	movs	r6, #0
 8004242:	f000 fe29 	bl	8004e98 <_init>
 8004246:	4c0a      	ldr	r4, [pc, #40]	@ (8004270 <__libc_init_array+0x40>)
 8004248:	4d0a      	ldr	r5, [pc, #40]	@ (8004274 <__libc_init_array+0x44>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	00b3      	lsls	r3, r6, #2
 8004256:	58eb      	ldr	r3, [r5, r3]
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	00b3      	lsls	r3, r6, #2
 8004260:	58eb      	ldr	r3, [r5, r3]
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	08005024 	.word	0x08005024
 800426c:	08005024 	.word	0x08005024
 8004270:	08005028 	.word	0x08005028
 8004274:	08005024 	.word	0x08005024

08004278 <__retarget_lock_init_recursive>:
 8004278:	4770      	bx	lr

0800427a <__retarget_lock_acquire_recursive>:
 800427a:	4770      	bx	lr

0800427c <__retarget_lock_release_recursive>:
 800427c:	4770      	bx	lr

0800427e <abort>:
 800427e:	2006      	movs	r0, #6
 8004280:	b510      	push	{r4, lr}
 8004282:	f000 fd3b 	bl	8004cfc <raise>
 8004286:	2001      	movs	r0, #1
 8004288:	f7fd f8b6 	bl	80013f8 <_exit>

0800428c <_free_r>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	0005      	movs	r5, r0
 8004290:	1e0c      	subs	r4, r1, #0
 8004292:	d010      	beq.n	80042b6 <_free_r+0x2a>
 8004294:	3c04      	subs	r4, #4
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	da00      	bge.n	800429e <_free_r+0x12>
 800429c:	18e4      	adds	r4, r4, r3
 800429e:	0028      	movs	r0, r5
 80042a0:	f000 f8e0 	bl	8004464 <__malloc_lock>
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <_free_r+0x90>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <_free_r+0x2c>
 80042ac:	6063      	str	r3, [r4, #4]
 80042ae:	6014      	str	r4, [r2, #0]
 80042b0:	0028      	movs	r0, r5
 80042b2:	f000 f8df 	bl	8004474 <__malloc_unlock>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d908      	bls.n	80042ce <_free_r+0x42>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	d1f3      	bne.n	80042ac <_free_r+0x20>
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	1809      	adds	r1, r1, r0
 80042ca:	6021      	str	r1, [r4, #0]
 80042cc:	e7ee      	b.n	80042ac <_free_r+0x20>
 80042ce:	001a      	movs	r2, r3
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <_free_r+0x4e>
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	d9f9      	bls.n	80042ce <_free_r+0x42>
 80042da:	6811      	ldr	r1, [r2, #0]
 80042dc:	1850      	adds	r0, r2, r1
 80042de:	42a0      	cmp	r0, r4
 80042e0:	d10b      	bne.n	80042fa <_free_r+0x6e>
 80042e2:	6820      	ldr	r0, [r4, #0]
 80042e4:	1809      	adds	r1, r1, r0
 80042e6:	1850      	adds	r0, r2, r1
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	4283      	cmp	r3, r0
 80042ec:	d1e0      	bne.n	80042b0 <_free_r+0x24>
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	1841      	adds	r1, r0, r1
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	6053      	str	r3, [r2, #4]
 80042f8:	e7da      	b.n	80042b0 <_free_r+0x24>
 80042fa:	42a0      	cmp	r0, r4
 80042fc:	d902      	bls.n	8004304 <_free_r+0x78>
 80042fe:	230c      	movs	r3, #12
 8004300:	602b      	str	r3, [r5, #0]
 8004302:	e7d5      	b.n	80042b0 <_free_r+0x24>
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	1821      	adds	r1, r4, r0
 8004308:	428b      	cmp	r3, r1
 800430a:	d103      	bne.n	8004314 <_free_r+0x88>
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	1809      	adds	r1, r1, r0
 8004312:	6021      	str	r1, [r4, #0]
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	6054      	str	r4, [r2, #4]
 8004318:	e7ca      	b.n	80042b0 <_free_r+0x24>
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	20003528 	.word	0x20003528

08004320 <sbrk_aligned>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	4e0f      	ldr	r6, [pc, #60]	@ (8004360 <sbrk_aligned+0x40>)
 8004324:	000d      	movs	r5, r1
 8004326:	6831      	ldr	r1, [r6, #0]
 8004328:	0004      	movs	r4, r0
 800432a:	2900      	cmp	r1, #0
 800432c:	d102      	bne.n	8004334 <sbrk_aligned+0x14>
 800432e:	f000 fd05 	bl	8004d3c <_sbrk_r>
 8004332:	6030      	str	r0, [r6, #0]
 8004334:	0029      	movs	r1, r5
 8004336:	0020      	movs	r0, r4
 8004338:	f000 fd00 	bl	8004d3c <_sbrk_r>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d103      	bne.n	8004348 <sbrk_aligned+0x28>
 8004340:	2501      	movs	r5, #1
 8004342:	426d      	negs	r5, r5
 8004344:	0028      	movs	r0, r5
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	2303      	movs	r3, #3
 800434a:	1cc5      	adds	r5, r0, #3
 800434c:	439d      	bics	r5, r3
 800434e:	42a8      	cmp	r0, r5
 8004350:	d0f8      	beq.n	8004344 <sbrk_aligned+0x24>
 8004352:	1a29      	subs	r1, r5, r0
 8004354:	0020      	movs	r0, r4
 8004356:	f000 fcf1 	bl	8004d3c <_sbrk_r>
 800435a:	3001      	adds	r0, #1
 800435c:	d1f2      	bne.n	8004344 <sbrk_aligned+0x24>
 800435e:	e7ef      	b.n	8004340 <sbrk_aligned+0x20>
 8004360:	20003524 	.word	0x20003524

08004364 <_malloc_r>:
 8004364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004366:	2203      	movs	r2, #3
 8004368:	1ccb      	adds	r3, r1, #3
 800436a:	4393      	bics	r3, r2
 800436c:	3308      	adds	r3, #8
 800436e:	0005      	movs	r5, r0
 8004370:	001f      	movs	r7, r3
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d234      	bcs.n	80043e0 <_malloc_r+0x7c>
 8004376:	270c      	movs	r7, #12
 8004378:	42b9      	cmp	r1, r7
 800437a:	d833      	bhi.n	80043e4 <_malloc_r+0x80>
 800437c:	0028      	movs	r0, r5
 800437e:	f000 f871 	bl	8004464 <__malloc_lock>
 8004382:	4e37      	ldr	r6, [pc, #220]	@ (8004460 <_malloc_r+0xfc>)
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	001c      	movs	r4, r3
 8004388:	2c00      	cmp	r4, #0
 800438a:	d12f      	bne.n	80043ec <_malloc_r+0x88>
 800438c:	0039      	movs	r1, r7
 800438e:	0028      	movs	r0, r5
 8004390:	f7ff ffc6 	bl	8004320 <sbrk_aligned>
 8004394:	0004      	movs	r4, r0
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d15f      	bne.n	800445a <_malloc_r+0xf6>
 800439a:	6834      	ldr	r4, [r6, #0]
 800439c:	9400      	str	r4, [sp, #0]
 800439e:	9b00      	ldr	r3, [sp, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d14a      	bne.n	800443a <_malloc_r+0xd6>
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	d052      	beq.n	800444e <_malloc_r+0xea>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	0028      	movs	r0, r5
 80043ac:	18e3      	adds	r3, r4, r3
 80043ae:	9900      	ldr	r1, [sp, #0]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	f000 fcc3 	bl	8004d3c <_sbrk_r>
 80043b6:	9b01      	ldr	r3, [sp, #4]
 80043b8:	4283      	cmp	r3, r0
 80043ba:	d148      	bne.n	800444e <_malloc_r+0xea>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	0028      	movs	r0, r5
 80043c0:	1aff      	subs	r7, r7, r3
 80043c2:	0039      	movs	r1, r7
 80043c4:	f7ff ffac 	bl	8004320 <sbrk_aligned>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d040      	beq.n	800444e <_malloc_r+0xea>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	19db      	adds	r3, r3, r7
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	6833      	ldr	r3, [r6, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	d133      	bne.n	8004442 <_malloc_r+0xde>
 80043da:	9b00      	ldr	r3, [sp, #0]
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	e019      	b.n	8004414 <_malloc_r+0xb0>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	dac9      	bge.n	8004378 <_malloc_r+0x14>
 80043e4:	230c      	movs	r3, #12
 80043e6:	602b      	str	r3, [r5, #0]
 80043e8:	2000      	movs	r0, #0
 80043ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043ec:	6821      	ldr	r1, [r4, #0]
 80043ee:	1bc9      	subs	r1, r1, r7
 80043f0:	d420      	bmi.n	8004434 <_malloc_r+0xd0>
 80043f2:	290b      	cmp	r1, #11
 80043f4:	d90a      	bls.n	800440c <_malloc_r+0xa8>
 80043f6:	19e2      	adds	r2, r4, r7
 80043f8:	6027      	str	r7, [r4, #0]
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	d104      	bne.n	8004408 <_malloc_r+0xa4>
 80043fe:	6032      	str	r2, [r6, #0]
 8004400:	6863      	ldr	r3, [r4, #4]
 8004402:	6011      	str	r1, [r2, #0]
 8004404:	6053      	str	r3, [r2, #4]
 8004406:	e005      	b.n	8004414 <_malloc_r+0xb0>
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	e7f9      	b.n	8004400 <_malloc_r+0x9c>
 800440c:	6862      	ldr	r2, [r4, #4]
 800440e:	42a3      	cmp	r3, r4
 8004410:	d10e      	bne.n	8004430 <_malloc_r+0xcc>
 8004412:	6032      	str	r2, [r6, #0]
 8004414:	0028      	movs	r0, r5
 8004416:	f000 f82d 	bl	8004474 <__malloc_unlock>
 800441a:	0020      	movs	r0, r4
 800441c:	2207      	movs	r2, #7
 800441e:	300b      	adds	r0, #11
 8004420:	1d23      	adds	r3, r4, #4
 8004422:	4390      	bics	r0, r2
 8004424:	1ac2      	subs	r2, r0, r3
 8004426:	4298      	cmp	r0, r3
 8004428:	d0df      	beq.n	80043ea <_malloc_r+0x86>
 800442a:	1a1b      	subs	r3, r3, r0
 800442c:	50a3      	str	r3, [r4, r2]
 800442e:	e7dc      	b.n	80043ea <_malloc_r+0x86>
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	e7ef      	b.n	8004414 <_malloc_r+0xb0>
 8004434:	0023      	movs	r3, r4
 8004436:	6864      	ldr	r4, [r4, #4]
 8004438:	e7a6      	b.n	8004388 <_malloc_r+0x24>
 800443a:	9c00      	ldr	r4, [sp, #0]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	e7ad      	b.n	800439e <_malloc_r+0x3a>
 8004442:	001a      	movs	r2, r3
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	42a3      	cmp	r3, r4
 8004448:	d1fb      	bne.n	8004442 <_malloc_r+0xde>
 800444a:	2300      	movs	r3, #0
 800444c:	e7da      	b.n	8004404 <_malloc_r+0xa0>
 800444e:	230c      	movs	r3, #12
 8004450:	0028      	movs	r0, r5
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f000 f80e 	bl	8004474 <__malloc_unlock>
 8004458:	e7c6      	b.n	80043e8 <_malloc_r+0x84>
 800445a:	6007      	str	r7, [r0, #0]
 800445c:	e7da      	b.n	8004414 <_malloc_r+0xb0>
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	20003528 	.word	0x20003528

08004464 <__malloc_lock>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4802      	ldr	r0, [pc, #8]	@ (8004470 <__malloc_lock+0xc>)
 8004468:	f7ff ff07 	bl	800427a <__retarget_lock_acquire_recursive>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	20003520 	.word	0x20003520

08004474 <__malloc_unlock>:
 8004474:	b510      	push	{r4, lr}
 8004476:	4802      	ldr	r0, [pc, #8]	@ (8004480 <__malloc_unlock+0xc>)
 8004478:	f7ff ff00 	bl	800427c <__retarget_lock_release_recursive>
 800447c:	bd10      	pop	{r4, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	20003520 	.word	0x20003520

08004484 <__sfputc_r>:
 8004484:	6893      	ldr	r3, [r2, #8]
 8004486:	b510      	push	{r4, lr}
 8004488:	3b01      	subs	r3, #1
 800448a:	6093      	str	r3, [r2, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	da04      	bge.n	800449a <__sfputc_r+0x16>
 8004490:	6994      	ldr	r4, [r2, #24]
 8004492:	42a3      	cmp	r3, r4
 8004494:	db07      	blt.n	80044a6 <__sfputc_r+0x22>
 8004496:	290a      	cmp	r1, #10
 8004498:	d005      	beq.n	80044a6 <__sfputc_r+0x22>
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	1c58      	adds	r0, r3, #1
 800449e:	6010      	str	r0, [r2, #0]
 80044a0:	7019      	strb	r1, [r3, #0]
 80044a2:	0008      	movs	r0, r1
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	f000 fb5e 	bl	8004b66 <__swbuf_r>
 80044aa:	0001      	movs	r1, r0
 80044ac:	e7f9      	b.n	80044a2 <__sfputc_r+0x1e>

080044ae <__sfputs_r>:
 80044ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b0:	0006      	movs	r6, r0
 80044b2:	000f      	movs	r7, r1
 80044b4:	0014      	movs	r4, r2
 80044b6:	18d5      	adds	r5, r2, r3
 80044b8:	42ac      	cmp	r4, r5
 80044ba:	d101      	bne.n	80044c0 <__sfputs_r+0x12>
 80044bc:	2000      	movs	r0, #0
 80044be:	e007      	b.n	80044d0 <__sfputs_r+0x22>
 80044c0:	7821      	ldrb	r1, [r4, #0]
 80044c2:	003a      	movs	r2, r7
 80044c4:	0030      	movs	r0, r6
 80044c6:	f7ff ffdd 	bl	8004484 <__sfputc_r>
 80044ca:	3401      	adds	r4, #1
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d1f3      	bne.n	80044b8 <__sfputs_r+0xa>
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d4 <_vfiprintf_r>:
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	b0a1      	sub	sp, #132	@ 0x84
 80044d8:	000f      	movs	r7, r1
 80044da:	0015      	movs	r5, r2
 80044dc:	001e      	movs	r6, r3
 80044de:	9003      	str	r0, [sp, #12]
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d004      	beq.n	80044ee <_vfiprintf_r+0x1a>
 80044e4:	6a03      	ldr	r3, [r0, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <_vfiprintf_r+0x1a>
 80044ea:	f7ff fdb5 	bl	8004058 <__sinit>
 80044ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044f0:	07db      	lsls	r3, r3, #31
 80044f2:	d405      	bmi.n	8004500 <_vfiprintf_r+0x2c>
 80044f4:	89bb      	ldrh	r3, [r7, #12]
 80044f6:	059b      	lsls	r3, r3, #22
 80044f8:	d402      	bmi.n	8004500 <_vfiprintf_r+0x2c>
 80044fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044fc:	f7ff febd 	bl	800427a <__retarget_lock_acquire_recursive>
 8004500:	89bb      	ldrh	r3, [r7, #12]
 8004502:	071b      	lsls	r3, r3, #28
 8004504:	d502      	bpl.n	800450c <_vfiprintf_r+0x38>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d113      	bne.n	8004534 <_vfiprintf_r+0x60>
 800450c:	0039      	movs	r1, r7
 800450e:	9803      	ldr	r0, [sp, #12]
 8004510:	f000 fb6c 	bl	8004bec <__swsetup_r>
 8004514:	2800      	cmp	r0, #0
 8004516:	d00d      	beq.n	8004534 <_vfiprintf_r+0x60>
 8004518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800451a:	07db      	lsls	r3, r3, #31
 800451c:	d503      	bpl.n	8004526 <_vfiprintf_r+0x52>
 800451e:	2001      	movs	r0, #1
 8004520:	4240      	negs	r0, r0
 8004522:	b021      	add	sp, #132	@ 0x84
 8004524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004526:	89bb      	ldrh	r3, [r7, #12]
 8004528:	059b      	lsls	r3, r3, #22
 800452a:	d4f8      	bmi.n	800451e <_vfiprintf_r+0x4a>
 800452c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800452e:	f7ff fea5 	bl	800427c <__retarget_lock_release_recursive>
 8004532:	e7f4      	b.n	800451e <_vfiprintf_r+0x4a>
 8004534:	2300      	movs	r3, #0
 8004536:	ac08      	add	r4, sp, #32
 8004538:	6163      	str	r3, [r4, #20]
 800453a:	3320      	adds	r3, #32
 800453c:	7663      	strb	r3, [r4, #25]
 800453e:	3310      	adds	r3, #16
 8004540:	76a3      	strb	r3, [r4, #26]
 8004542:	9607      	str	r6, [sp, #28]
 8004544:	002e      	movs	r6, r5
 8004546:	7833      	ldrb	r3, [r6, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <_vfiprintf_r+0x7c>
 800454c:	2b25      	cmp	r3, #37	@ 0x25
 800454e:	d148      	bne.n	80045e2 <_vfiprintf_r+0x10e>
 8004550:	1b73      	subs	r3, r6, r5
 8004552:	9305      	str	r3, [sp, #20]
 8004554:	42ae      	cmp	r6, r5
 8004556:	d00b      	beq.n	8004570 <_vfiprintf_r+0x9c>
 8004558:	002a      	movs	r2, r5
 800455a:	0039      	movs	r1, r7
 800455c:	9803      	ldr	r0, [sp, #12]
 800455e:	f7ff ffa6 	bl	80044ae <__sfputs_r>
 8004562:	3001      	adds	r0, #1
 8004564:	d100      	bne.n	8004568 <_vfiprintf_r+0x94>
 8004566:	e0ae      	b.n	80046c6 <_vfiprintf_r+0x1f2>
 8004568:	6963      	ldr	r3, [r4, #20]
 800456a:	9a05      	ldr	r2, [sp, #20]
 800456c:	189b      	adds	r3, r3, r2
 800456e:	6163      	str	r3, [r4, #20]
 8004570:	7833      	ldrb	r3, [r6, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d100      	bne.n	8004578 <_vfiprintf_r+0xa4>
 8004576:	e0a6      	b.n	80046c6 <_vfiprintf_r+0x1f2>
 8004578:	2201      	movs	r2, #1
 800457a:	2300      	movs	r3, #0
 800457c:	4252      	negs	r2, r2
 800457e:	6062      	str	r2, [r4, #4]
 8004580:	a904      	add	r1, sp, #16
 8004582:	3254      	adds	r2, #84	@ 0x54
 8004584:	1852      	adds	r2, r2, r1
 8004586:	1c75      	adds	r5, r6, #1
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	60e3      	str	r3, [r4, #12]
 800458c:	60a3      	str	r3, [r4, #8]
 800458e:	7013      	strb	r3, [r2, #0]
 8004590:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004592:	4b59      	ldr	r3, [pc, #356]	@ (80046f8 <_vfiprintf_r+0x224>)
 8004594:	2205      	movs	r2, #5
 8004596:	0018      	movs	r0, r3
 8004598:	7829      	ldrb	r1, [r5, #0]
 800459a:	9305      	str	r3, [sp, #20]
 800459c:	f000 fbe0 	bl	8004d60 <memchr>
 80045a0:	1c6e      	adds	r6, r5, #1
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d11f      	bne.n	80045e6 <_vfiprintf_r+0x112>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	06d3      	lsls	r3, r2, #27
 80045aa:	d504      	bpl.n	80045b6 <_vfiprintf_r+0xe2>
 80045ac:	2353      	movs	r3, #83	@ 0x53
 80045ae:	a904      	add	r1, sp, #16
 80045b0:	185b      	adds	r3, r3, r1
 80045b2:	2120      	movs	r1, #32
 80045b4:	7019      	strb	r1, [r3, #0]
 80045b6:	0713      	lsls	r3, r2, #28
 80045b8:	d504      	bpl.n	80045c4 <_vfiprintf_r+0xf0>
 80045ba:	2353      	movs	r3, #83	@ 0x53
 80045bc:	a904      	add	r1, sp, #16
 80045be:	185b      	adds	r3, r3, r1
 80045c0:	212b      	movs	r1, #43	@ 0x2b
 80045c2:	7019      	strb	r1, [r3, #0]
 80045c4:	782b      	ldrb	r3, [r5, #0]
 80045c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c8:	d016      	beq.n	80045f8 <_vfiprintf_r+0x124>
 80045ca:	002e      	movs	r6, r5
 80045cc:	2100      	movs	r1, #0
 80045ce:	200a      	movs	r0, #10
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	7832      	ldrb	r2, [r6, #0]
 80045d4:	1c75      	adds	r5, r6, #1
 80045d6:	3a30      	subs	r2, #48	@ 0x30
 80045d8:	2a09      	cmp	r2, #9
 80045da:	d950      	bls.n	800467e <_vfiprintf_r+0x1aa>
 80045dc:	2900      	cmp	r1, #0
 80045de:	d111      	bne.n	8004604 <_vfiprintf_r+0x130>
 80045e0:	e017      	b.n	8004612 <_vfiprintf_r+0x13e>
 80045e2:	3601      	adds	r6, #1
 80045e4:	e7af      	b.n	8004546 <_vfiprintf_r+0x72>
 80045e6:	9b05      	ldr	r3, [sp, #20]
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	1ac0      	subs	r0, r0, r3
 80045ec:	2301      	movs	r3, #1
 80045ee:	4083      	lsls	r3, r0
 80045f0:	4313      	orrs	r3, r2
 80045f2:	0035      	movs	r5, r6
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	e7cc      	b.n	8004592 <_vfiprintf_r+0xbe>
 80045f8:	9b07      	ldr	r3, [sp, #28]
 80045fa:	1d19      	adds	r1, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	9107      	str	r1, [sp, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	db01      	blt.n	8004608 <_vfiprintf_r+0x134>
 8004604:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004606:	e004      	b.n	8004612 <_vfiprintf_r+0x13e>
 8004608:	425b      	negs	r3, r3
 800460a:	60e3      	str	r3, [r4, #12]
 800460c:	2302      	movs	r3, #2
 800460e:	4313      	orrs	r3, r2
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	7833      	ldrb	r3, [r6, #0]
 8004614:	2b2e      	cmp	r3, #46	@ 0x2e
 8004616:	d10c      	bne.n	8004632 <_vfiprintf_r+0x15e>
 8004618:	7873      	ldrb	r3, [r6, #1]
 800461a:	2b2a      	cmp	r3, #42	@ 0x2a
 800461c:	d134      	bne.n	8004688 <_vfiprintf_r+0x1b4>
 800461e:	9b07      	ldr	r3, [sp, #28]
 8004620:	3602      	adds	r6, #2
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	9207      	str	r2, [sp, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	da01      	bge.n	8004630 <_vfiprintf_r+0x15c>
 800462c:	2301      	movs	r3, #1
 800462e:	425b      	negs	r3, r3
 8004630:	9309      	str	r3, [sp, #36]	@ 0x24
 8004632:	4d32      	ldr	r5, [pc, #200]	@ (80046fc <_vfiprintf_r+0x228>)
 8004634:	2203      	movs	r2, #3
 8004636:	0028      	movs	r0, r5
 8004638:	7831      	ldrb	r1, [r6, #0]
 800463a:	f000 fb91 	bl	8004d60 <memchr>
 800463e:	2800      	cmp	r0, #0
 8004640:	d006      	beq.n	8004650 <_vfiprintf_r+0x17c>
 8004642:	2340      	movs	r3, #64	@ 0x40
 8004644:	1b40      	subs	r0, r0, r5
 8004646:	4083      	lsls	r3, r0
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	3601      	adds	r6, #1
 800464c:	4313      	orrs	r3, r2
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	7831      	ldrb	r1, [r6, #0]
 8004652:	2206      	movs	r2, #6
 8004654:	482a      	ldr	r0, [pc, #168]	@ (8004700 <_vfiprintf_r+0x22c>)
 8004656:	1c75      	adds	r5, r6, #1
 8004658:	7621      	strb	r1, [r4, #24]
 800465a:	f000 fb81 	bl	8004d60 <memchr>
 800465e:	2800      	cmp	r0, #0
 8004660:	d040      	beq.n	80046e4 <_vfiprintf_r+0x210>
 8004662:	4b28      	ldr	r3, [pc, #160]	@ (8004704 <_vfiprintf_r+0x230>)
 8004664:	2b00      	cmp	r3, #0
 8004666:	d122      	bne.n	80046ae <_vfiprintf_r+0x1da>
 8004668:	2207      	movs	r2, #7
 800466a:	9b07      	ldr	r3, [sp, #28]
 800466c:	3307      	adds	r3, #7
 800466e:	4393      	bics	r3, r2
 8004670:	3308      	adds	r3, #8
 8004672:	9307      	str	r3, [sp, #28]
 8004674:	6963      	ldr	r3, [r4, #20]
 8004676:	9a04      	ldr	r2, [sp, #16]
 8004678:	189b      	adds	r3, r3, r2
 800467a:	6163      	str	r3, [r4, #20]
 800467c:	e762      	b.n	8004544 <_vfiprintf_r+0x70>
 800467e:	4343      	muls	r3, r0
 8004680:	002e      	movs	r6, r5
 8004682:	2101      	movs	r1, #1
 8004684:	189b      	adds	r3, r3, r2
 8004686:	e7a4      	b.n	80045d2 <_vfiprintf_r+0xfe>
 8004688:	2300      	movs	r3, #0
 800468a:	200a      	movs	r0, #10
 800468c:	0019      	movs	r1, r3
 800468e:	3601      	adds	r6, #1
 8004690:	6063      	str	r3, [r4, #4]
 8004692:	7832      	ldrb	r2, [r6, #0]
 8004694:	1c75      	adds	r5, r6, #1
 8004696:	3a30      	subs	r2, #48	@ 0x30
 8004698:	2a09      	cmp	r2, #9
 800469a:	d903      	bls.n	80046a4 <_vfiprintf_r+0x1d0>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0c8      	beq.n	8004632 <_vfiprintf_r+0x15e>
 80046a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80046a2:	e7c6      	b.n	8004632 <_vfiprintf_r+0x15e>
 80046a4:	4341      	muls	r1, r0
 80046a6:	002e      	movs	r6, r5
 80046a8:	2301      	movs	r3, #1
 80046aa:	1889      	adds	r1, r1, r2
 80046ac:	e7f1      	b.n	8004692 <_vfiprintf_r+0x1be>
 80046ae:	aa07      	add	r2, sp, #28
 80046b0:	9200      	str	r2, [sp, #0]
 80046b2:	0021      	movs	r1, r4
 80046b4:	003a      	movs	r2, r7
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <_vfiprintf_r+0x234>)
 80046b8:	9803      	ldr	r0, [sp, #12]
 80046ba:	e000      	b.n	80046be <_vfiprintf_r+0x1ea>
 80046bc:	bf00      	nop
 80046be:	9004      	str	r0, [sp, #16]
 80046c0:	9b04      	ldr	r3, [sp, #16]
 80046c2:	3301      	adds	r3, #1
 80046c4:	d1d6      	bne.n	8004674 <_vfiprintf_r+0x1a0>
 80046c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046c8:	07db      	lsls	r3, r3, #31
 80046ca:	d405      	bmi.n	80046d8 <_vfiprintf_r+0x204>
 80046cc:	89bb      	ldrh	r3, [r7, #12]
 80046ce:	059b      	lsls	r3, r3, #22
 80046d0:	d402      	bmi.n	80046d8 <_vfiprintf_r+0x204>
 80046d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80046d4:	f7ff fdd2 	bl	800427c <__retarget_lock_release_recursive>
 80046d8:	89bb      	ldrh	r3, [r7, #12]
 80046da:	065b      	lsls	r3, r3, #25
 80046dc:	d500      	bpl.n	80046e0 <_vfiprintf_r+0x20c>
 80046de:	e71e      	b.n	800451e <_vfiprintf_r+0x4a>
 80046e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046e2:	e71e      	b.n	8004522 <_vfiprintf_r+0x4e>
 80046e4:	aa07      	add	r2, sp, #28
 80046e6:	9200      	str	r2, [sp, #0]
 80046e8:	0021      	movs	r1, r4
 80046ea:	003a      	movs	r2, r7
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <_vfiprintf_r+0x234>)
 80046ee:	9803      	ldr	r0, [sp, #12]
 80046f0:	f000 f87c 	bl	80047ec <_printf_i>
 80046f4:	e7e3      	b.n	80046be <_vfiprintf_r+0x1ea>
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	08004ff0 	.word	0x08004ff0
 80046fc:	08004ff6 	.word	0x08004ff6
 8004700:	08004ffa 	.word	0x08004ffa
 8004704:	00000000 	.word	0x00000000
 8004708:	080044af 	.word	0x080044af

0800470c <_printf_common>:
 800470c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470e:	0016      	movs	r6, r2
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	688a      	ldr	r2, [r1, #8]
 8004714:	690b      	ldr	r3, [r1, #16]
 8004716:	000c      	movs	r4, r1
 8004718:	9000      	str	r0, [sp, #0]
 800471a:	4293      	cmp	r3, r2
 800471c:	da00      	bge.n	8004720 <_printf_common+0x14>
 800471e:	0013      	movs	r3, r2
 8004720:	0022      	movs	r2, r4
 8004722:	6033      	str	r3, [r6, #0]
 8004724:	3243      	adds	r2, #67	@ 0x43
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	2a00      	cmp	r2, #0
 800472a:	d001      	beq.n	8004730 <_printf_common+0x24>
 800472c:	3301      	adds	r3, #1
 800472e:	6033      	str	r3, [r6, #0]
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	069b      	lsls	r3, r3, #26
 8004734:	d502      	bpl.n	800473c <_printf_common+0x30>
 8004736:	6833      	ldr	r3, [r6, #0]
 8004738:	3302      	adds	r3, #2
 800473a:	6033      	str	r3, [r6, #0]
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	2306      	movs	r3, #6
 8004740:	0015      	movs	r5, r2
 8004742:	401d      	ands	r5, r3
 8004744:	421a      	tst	r2, r3
 8004746:	d027      	beq.n	8004798 <_printf_common+0x8c>
 8004748:	0023      	movs	r3, r4
 800474a:	3343      	adds	r3, #67	@ 0x43
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	4193      	sbcs	r3, r2
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	0692      	lsls	r2, r2, #26
 8004756:	d430      	bmi.n	80047ba <_printf_common+0xae>
 8004758:	0022      	movs	r2, r4
 800475a:	9901      	ldr	r1, [sp, #4]
 800475c:	9800      	ldr	r0, [sp, #0]
 800475e:	9d08      	ldr	r5, [sp, #32]
 8004760:	3243      	adds	r2, #67	@ 0x43
 8004762:	47a8      	blx	r5
 8004764:	3001      	adds	r0, #1
 8004766:	d025      	beq.n	80047b4 <_printf_common+0xa8>
 8004768:	2206      	movs	r2, #6
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	2500      	movs	r5, #0
 800476e:	4013      	ands	r3, r2
 8004770:	2b04      	cmp	r3, #4
 8004772:	d105      	bne.n	8004780 <_printf_common+0x74>
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	68e5      	ldr	r5, [r4, #12]
 8004778:	1aed      	subs	r5, r5, r3
 800477a:	43eb      	mvns	r3, r5
 800477c:	17db      	asrs	r3, r3, #31
 800477e:	401d      	ands	r5, r3
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	6922      	ldr	r2, [r4, #16]
 8004784:	4293      	cmp	r3, r2
 8004786:	dd01      	ble.n	800478c <_printf_common+0x80>
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	18ed      	adds	r5, r5, r3
 800478c:	2600      	movs	r6, #0
 800478e:	42b5      	cmp	r5, r6
 8004790:	d120      	bne.n	80047d4 <_printf_common+0xc8>
 8004792:	2000      	movs	r0, #0
 8004794:	e010      	b.n	80047b8 <_printf_common+0xac>
 8004796:	3501      	adds	r5, #1
 8004798:	68e3      	ldr	r3, [r4, #12]
 800479a:	6832      	ldr	r2, [r6, #0]
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	42ab      	cmp	r3, r5
 80047a0:	ddd2      	ble.n	8004748 <_printf_common+0x3c>
 80047a2:	0022      	movs	r2, r4
 80047a4:	2301      	movs	r3, #1
 80047a6:	9901      	ldr	r1, [sp, #4]
 80047a8:	9800      	ldr	r0, [sp, #0]
 80047aa:	9f08      	ldr	r7, [sp, #32]
 80047ac:	3219      	adds	r2, #25
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1f0      	bne.n	8004796 <_printf_common+0x8a>
 80047b4:	2001      	movs	r0, #1
 80047b6:	4240      	negs	r0, r0
 80047b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ba:	2030      	movs	r0, #48	@ 0x30
 80047bc:	18e1      	adds	r1, r4, r3
 80047be:	3143      	adds	r1, #67	@ 0x43
 80047c0:	7008      	strb	r0, [r1, #0]
 80047c2:	0021      	movs	r1, r4
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	3145      	adds	r1, #69	@ 0x45
 80047c8:	7809      	ldrb	r1, [r1, #0]
 80047ca:	18a2      	adds	r2, r4, r2
 80047cc:	3243      	adds	r2, #67	@ 0x43
 80047ce:	3302      	adds	r3, #2
 80047d0:	7011      	strb	r1, [r2, #0]
 80047d2:	e7c1      	b.n	8004758 <_printf_common+0x4c>
 80047d4:	0022      	movs	r2, r4
 80047d6:	2301      	movs	r3, #1
 80047d8:	9901      	ldr	r1, [sp, #4]
 80047da:	9800      	ldr	r0, [sp, #0]
 80047dc:	9f08      	ldr	r7, [sp, #32]
 80047de:	321a      	adds	r2, #26
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0e6      	beq.n	80047b4 <_printf_common+0xa8>
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7d1      	b.n	800478e <_printf_common+0x82>
	...

080047ec <_printf_i>:
 80047ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ee:	b08b      	sub	sp, #44	@ 0x2c
 80047f0:	9206      	str	r2, [sp, #24]
 80047f2:	000a      	movs	r2, r1
 80047f4:	3243      	adds	r2, #67	@ 0x43
 80047f6:	9307      	str	r3, [sp, #28]
 80047f8:	9005      	str	r0, [sp, #20]
 80047fa:	9203      	str	r2, [sp, #12]
 80047fc:	7e0a      	ldrb	r2, [r1, #24]
 80047fe:	000c      	movs	r4, r1
 8004800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004802:	2a78      	cmp	r2, #120	@ 0x78
 8004804:	d809      	bhi.n	800481a <_printf_i+0x2e>
 8004806:	2a62      	cmp	r2, #98	@ 0x62
 8004808:	d80b      	bhi.n	8004822 <_printf_i+0x36>
 800480a:	2a00      	cmp	r2, #0
 800480c:	d100      	bne.n	8004810 <_printf_i+0x24>
 800480e:	e0ba      	b.n	8004986 <_printf_i+0x19a>
 8004810:	497a      	ldr	r1, [pc, #488]	@ (80049fc <_printf_i+0x210>)
 8004812:	9104      	str	r1, [sp, #16]
 8004814:	2a58      	cmp	r2, #88	@ 0x58
 8004816:	d100      	bne.n	800481a <_printf_i+0x2e>
 8004818:	e08e      	b.n	8004938 <_printf_i+0x14c>
 800481a:	0025      	movs	r5, r4
 800481c:	3542      	adds	r5, #66	@ 0x42
 800481e:	702a      	strb	r2, [r5, #0]
 8004820:	e022      	b.n	8004868 <_printf_i+0x7c>
 8004822:	0010      	movs	r0, r2
 8004824:	3863      	subs	r0, #99	@ 0x63
 8004826:	2815      	cmp	r0, #21
 8004828:	d8f7      	bhi.n	800481a <_printf_i+0x2e>
 800482a:	f7fb fc6b 	bl	8000104 <__gnu_thumb1_case_shi>
 800482e:	0016      	.short	0x0016
 8004830:	fff6001f 	.word	0xfff6001f
 8004834:	fff6fff6 	.word	0xfff6fff6
 8004838:	001ffff6 	.word	0x001ffff6
 800483c:	fff6fff6 	.word	0xfff6fff6
 8004840:	fff6fff6 	.word	0xfff6fff6
 8004844:	0036009f 	.word	0x0036009f
 8004848:	fff6007e 	.word	0xfff6007e
 800484c:	00b0fff6 	.word	0x00b0fff6
 8004850:	0036fff6 	.word	0x0036fff6
 8004854:	fff6fff6 	.word	0xfff6fff6
 8004858:	0082      	.short	0x0082
 800485a:	0025      	movs	r5, r4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	3542      	adds	r5, #66	@ 0x42
 8004860:	1d11      	adds	r1, r2, #4
 8004862:	6019      	str	r1, [r3, #0]
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	702b      	strb	r3, [r5, #0]
 8004868:	2301      	movs	r3, #1
 800486a:	e09e      	b.n	80049aa <_printf_i+0x1be>
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	6809      	ldr	r1, [r1, #0]
 8004870:	1d02      	adds	r2, r0, #4
 8004872:	060d      	lsls	r5, r1, #24
 8004874:	d50b      	bpl.n	800488e <_printf_i+0xa2>
 8004876:	6806      	ldr	r6, [r0, #0]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	2e00      	cmp	r6, #0
 800487c:	da03      	bge.n	8004886 <_printf_i+0x9a>
 800487e:	232d      	movs	r3, #45	@ 0x2d
 8004880:	9a03      	ldr	r2, [sp, #12]
 8004882:	4276      	negs	r6, r6
 8004884:	7013      	strb	r3, [r2, #0]
 8004886:	4b5d      	ldr	r3, [pc, #372]	@ (80049fc <_printf_i+0x210>)
 8004888:	270a      	movs	r7, #10
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	e018      	b.n	80048c0 <_printf_i+0xd4>
 800488e:	6806      	ldr	r6, [r0, #0]
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	0649      	lsls	r1, r1, #25
 8004894:	d5f1      	bpl.n	800487a <_printf_i+0x8e>
 8004896:	b236      	sxth	r6, r6
 8004898:	e7ef      	b.n	800487a <_printf_i+0x8e>
 800489a:	6808      	ldr	r0, [r1, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	c940      	ldmia	r1!, {r6}
 80048a0:	0605      	lsls	r5, r0, #24
 80048a2:	d402      	bmi.n	80048aa <_printf_i+0xbe>
 80048a4:	0640      	lsls	r0, r0, #25
 80048a6:	d500      	bpl.n	80048aa <_printf_i+0xbe>
 80048a8:	b2b6      	uxth	r6, r6
 80048aa:	6019      	str	r1, [r3, #0]
 80048ac:	4b53      	ldr	r3, [pc, #332]	@ (80049fc <_printf_i+0x210>)
 80048ae:	270a      	movs	r7, #10
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80048b4:	d100      	bne.n	80048b8 <_printf_i+0xcc>
 80048b6:	3f02      	subs	r7, #2
 80048b8:	0023      	movs	r3, r4
 80048ba:	2200      	movs	r2, #0
 80048bc:	3343      	adds	r3, #67	@ 0x43
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	db06      	blt.n	80048d6 <_printf_i+0xea>
 80048c8:	2104      	movs	r1, #4
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	9d03      	ldr	r5, [sp, #12]
 80048ce:	438a      	bics	r2, r1
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	4333      	orrs	r3, r6
 80048d4:	d00c      	beq.n	80048f0 <_printf_i+0x104>
 80048d6:	9d03      	ldr	r5, [sp, #12]
 80048d8:	0030      	movs	r0, r6
 80048da:	0039      	movs	r1, r7
 80048dc:	f7fb fca2 	bl	8000224 <__aeabi_uidivmod>
 80048e0:	9b04      	ldr	r3, [sp, #16]
 80048e2:	3d01      	subs	r5, #1
 80048e4:	5c5b      	ldrb	r3, [r3, r1]
 80048e6:	702b      	strb	r3, [r5, #0]
 80048e8:	0033      	movs	r3, r6
 80048ea:	0006      	movs	r6, r0
 80048ec:	429f      	cmp	r7, r3
 80048ee:	d9f3      	bls.n	80048d8 <_printf_i+0xec>
 80048f0:	2f08      	cmp	r7, #8
 80048f2:	d109      	bne.n	8004908 <_printf_i+0x11c>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	07db      	lsls	r3, r3, #31
 80048f8:	d506      	bpl.n	8004908 <_printf_i+0x11c>
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	dc02      	bgt.n	8004908 <_printf_i+0x11c>
 8004902:	2330      	movs	r3, #48	@ 0x30
 8004904:	3d01      	subs	r5, #1
 8004906:	702b      	strb	r3, [r5, #0]
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	1b5b      	subs	r3, r3, r5
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	9b07      	ldr	r3, [sp, #28]
 8004910:	0021      	movs	r1, r4
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	9805      	ldr	r0, [sp, #20]
 8004916:	9b06      	ldr	r3, [sp, #24]
 8004918:	aa09      	add	r2, sp, #36	@ 0x24
 800491a:	f7ff fef7 	bl	800470c <_printf_common>
 800491e:	3001      	adds	r0, #1
 8004920:	d148      	bne.n	80049b4 <_printf_i+0x1c8>
 8004922:	2001      	movs	r0, #1
 8004924:	4240      	negs	r0, r0
 8004926:	b00b      	add	sp, #44	@ 0x2c
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	2220      	movs	r2, #32
 800492c:	6809      	ldr	r1, [r1, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	6022      	str	r2, [r4, #0]
 8004932:	2278      	movs	r2, #120	@ 0x78
 8004934:	4932      	ldr	r1, [pc, #200]	@ (8004a00 <_printf_i+0x214>)
 8004936:	9104      	str	r1, [sp, #16]
 8004938:	0021      	movs	r1, r4
 800493a:	3145      	adds	r1, #69	@ 0x45
 800493c:	700a      	strb	r2, [r1, #0]
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	c940      	ldmia	r1!, {r6}
 8004944:	0610      	lsls	r0, r2, #24
 8004946:	d402      	bmi.n	800494e <_printf_i+0x162>
 8004948:	0650      	lsls	r0, r2, #25
 800494a:	d500      	bpl.n	800494e <_printf_i+0x162>
 800494c:	b2b6      	uxth	r6, r6
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	07d3      	lsls	r3, r2, #31
 8004952:	d502      	bpl.n	800495a <_printf_i+0x16e>
 8004954:	2320      	movs	r3, #32
 8004956:	4313      	orrs	r3, r2
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	2e00      	cmp	r6, #0
 800495c:	d001      	beq.n	8004962 <_printf_i+0x176>
 800495e:	2710      	movs	r7, #16
 8004960:	e7aa      	b.n	80048b8 <_printf_i+0xcc>
 8004962:	2220      	movs	r2, #32
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	4393      	bics	r3, r2
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	e7f8      	b.n	800495e <_printf_i+0x172>
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	680d      	ldr	r5, [r1, #0]
 8004970:	1d10      	adds	r0, r2, #4
 8004972:	6949      	ldr	r1, [r1, #20]
 8004974:	6018      	str	r0, [r3, #0]
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	062e      	lsls	r6, r5, #24
 800497a:	d501      	bpl.n	8004980 <_printf_i+0x194>
 800497c:	6019      	str	r1, [r3, #0]
 800497e:	e002      	b.n	8004986 <_printf_i+0x19a>
 8004980:	066d      	lsls	r5, r5, #25
 8004982:	d5fb      	bpl.n	800497c <_printf_i+0x190>
 8004984:	8019      	strh	r1, [r3, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	9d03      	ldr	r5, [sp, #12]
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	e7bf      	b.n	800490e <_printf_i+0x122>
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	1d11      	adds	r1, r2, #4
 8004992:	6019      	str	r1, [r3, #0]
 8004994:	6815      	ldr	r5, [r2, #0]
 8004996:	2100      	movs	r1, #0
 8004998:	0028      	movs	r0, r5
 800499a:	6862      	ldr	r2, [r4, #4]
 800499c:	f000 f9e0 	bl	8004d60 <memchr>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d001      	beq.n	80049a8 <_printf_i+0x1bc>
 80049a4:	1b40      	subs	r0, r0, r5
 80049a6:	6060      	str	r0, [r4, #4]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2300      	movs	r3, #0
 80049ae:	9a03      	ldr	r2, [sp, #12]
 80049b0:	7013      	strb	r3, [r2, #0]
 80049b2:	e7ac      	b.n	800490e <_printf_i+0x122>
 80049b4:	002a      	movs	r2, r5
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	9906      	ldr	r1, [sp, #24]
 80049ba:	9805      	ldr	r0, [sp, #20]
 80049bc:	9d07      	ldr	r5, [sp, #28]
 80049be:	47a8      	blx	r5
 80049c0:	3001      	adds	r0, #1
 80049c2:	d0ae      	beq.n	8004922 <_printf_i+0x136>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	079b      	lsls	r3, r3, #30
 80049c8:	d415      	bmi.n	80049f6 <_printf_i+0x20a>
 80049ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049cc:	68e0      	ldr	r0, [r4, #12]
 80049ce:	4298      	cmp	r0, r3
 80049d0:	daa9      	bge.n	8004926 <_printf_i+0x13a>
 80049d2:	0018      	movs	r0, r3
 80049d4:	e7a7      	b.n	8004926 <_printf_i+0x13a>
 80049d6:	0022      	movs	r2, r4
 80049d8:	2301      	movs	r3, #1
 80049da:	9906      	ldr	r1, [sp, #24]
 80049dc:	9805      	ldr	r0, [sp, #20]
 80049de:	9e07      	ldr	r6, [sp, #28]
 80049e0:	3219      	adds	r2, #25
 80049e2:	47b0      	blx	r6
 80049e4:	3001      	adds	r0, #1
 80049e6:	d09c      	beq.n	8004922 <_printf_i+0x136>
 80049e8:	3501      	adds	r5, #1
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dcf0      	bgt.n	80049d6 <_printf_i+0x1ea>
 80049f4:	e7e9      	b.n	80049ca <_printf_i+0x1de>
 80049f6:	2500      	movs	r5, #0
 80049f8:	e7f7      	b.n	80049ea <_printf_i+0x1fe>
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	08005001 	.word	0x08005001
 8004a00:	08005012 	.word	0x08005012

08004a04 <__sflush_r>:
 8004a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a06:	220c      	movs	r2, #12
 8004a08:	5e8b      	ldrsh	r3, [r1, r2]
 8004a0a:	0005      	movs	r5, r0
 8004a0c:	000c      	movs	r4, r1
 8004a0e:	071a      	lsls	r2, r3, #28
 8004a10:	d456      	bmi.n	8004ac0 <__sflush_r+0xbc>
 8004a12:	684a      	ldr	r2, [r1, #4]
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	dc02      	bgt.n	8004a1e <__sflush_r+0x1a>
 8004a18:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	dd4e      	ble.n	8004abc <__sflush_r+0xb8>
 8004a1e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	d04b      	beq.n	8004abc <__sflush_r+0xb8>
 8004a24:	2200      	movs	r2, #0
 8004a26:	2080      	movs	r0, #128	@ 0x80
 8004a28:	682e      	ldr	r6, [r5, #0]
 8004a2a:	602a      	str	r2, [r5, #0]
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	0140      	lsls	r0, r0, #5
 8004a30:	6a21      	ldr	r1, [r4, #32]
 8004a32:	4002      	ands	r2, r0
 8004a34:	4203      	tst	r3, r0
 8004a36:	d033      	beq.n	8004aa0 <__sflush_r+0x9c>
 8004a38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	075b      	lsls	r3, r3, #29
 8004a3e:	d506      	bpl.n	8004a4e <__sflush_r+0x4a>
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <__sflush_r+0x4a>
 8004a4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a4c:	1ad2      	subs	r2, r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	0028      	movs	r0, r5
 8004a52:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a54:	6a21      	ldr	r1, [r4, #32]
 8004a56:	47b8      	blx	r7
 8004a58:	89a2      	ldrh	r2, [r4, #12]
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	d106      	bne.n	8004a6c <__sflush_r+0x68>
 8004a5e:	6829      	ldr	r1, [r5, #0]
 8004a60:	291d      	cmp	r1, #29
 8004a62:	d846      	bhi.n	8004af2 <__sflush_r+0xee>
 8004a64:	4b29      	ldr	r3, [pc, #164]	@ (8004b0c <__sflush_r+0x108>)
 8004a66:	40cb      	lsrs	r3, r1
 8004a68:	07db      	lsls	r3, r3, #31
 8004a6a:	d542      	bpl.n	8004af2 <__sflush_r+0xee>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6063      	str	r3, [r4, #4]
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	04d2      	lsls	r2, r2, #19
 8004a76:	d505      	bpl.n	8004a84 <__sflush_r+0x80>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <__sflush_r+0x7e>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d100      	bne.n	8004a84 <__sflush_r+0x80>
 8004a82:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a86:	602e      	str	r6, [r5, #0]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d017      	beq.n	8004abc <__sflush_r+0xb8>
 8004a8c:	0023      	movs	r3, r4
 8004a8e:	3344      	adds	r3, #68	@ 0x44
 8004a90:	4299      	cmp	r1, r3
 8004a92:	d002      	beq.n	8004a9a <__sflush_r+0x96>
 8004a94:	0028      	movs	r0, r5
 8004a96:	f7ff fbf9 	bl	800428c <_free_r>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a9e:	e00d      	b.n	8004abc <__sflush_r+0xb8>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	0028      	movs	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d1c6      	bne.n	8004a3a <__sflush_r+0x36>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0c3      	beq.n	8004a3a <__sflush_r+0x36>
 8004ab2:	2b1d      	cmp	r3, #29
 8004ab4:	d001      	beq.n	8004aba <__sflush_r+0xb6>
 8004ab6:	2b16      	cmp	r3, #22
 8004ab8:	d11a      	bne.n	8004af0 <__sflush_r+0xec>
 8004aba:	602e      	str	r6, [r5, #0]
 8004abc:	2000      	movs	r0, #0
 8004abe:	e01e      	b.n	8004afe <__sflush_r+0xfa>
 8004ac0:	690e      	ldr	r6, [r1, #16]
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	d0fa      	beq.n	8004abc <__sflush_r+0xb8>
 8004ac6:	680f      	ldr	r7, [r1, #0]
 8004ac8:	600e      	str	r6, [r1, #0]
 8004aca:	1bba      	subs	r2, r7, r6
 8004acc:	9201      	str	r2, [sp, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	079b      	lsls	r3, r3, #30
 8004ad2:	d100      	bne.n	8004ad6 <__sflush_r+0xd2>
 8004ad4:	694a      	ldr	r2, [r1, #20]
 8004ad6:	60a2      	str	r2, [r4, #8]
 8004ad8:	9b01      	ldr	r3, [sp, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	ddee      	ble.n	8004abc <__sflush_r+0xb8>
 8004ade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ae0:	0032      	movs	r2, r6
 8004ae2:	001f      	movs	r7, r3
 8004ae4:	0028      	movs	r0, r5
 8004ae6:	9b01      	ldr	r3, [sp, #4]
 8004ae8:	6a21      	ldr	r1, [r4, #32]
 8004aea:	47b8      	blx	r7
 8004aec:	2800      	cmp	r0, #0
 8004aee:	dc07      	bgt.n	8004b00 <__sflush_r+0xfc>
 8004af0:	89a2      	ldrh	r2, [r4, #12]
 8004af2:	2340      	movs	r3, #64	@ 0x40
 8004af4:	2001      	movs	r0, #1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21b      	sxth	r3, r3
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	4240      	negs	r0, r0
 8004afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b00:	9b01      	ldr	r3, [sp, #4]
 8004b02:	1836      	adds	r6, r6, r0
 8004b04:	1a1b      	subs	r3, r3, r0
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	e7e6      	b.n	8004ad8 <__sflush_r+0xd4>
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	20400001 	.word	0x20400001

08004b10 <_fflush_r>:
 8004b10:	690b      	ldr	r3, [r1, #16]
 8004b12:	b570      	push	{r4, r5, r6, lr}
 8004b14:	0005      	movs	r5, r0
 8004b16:	000c      	movs	r4, r1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <_fflush_r+0x12>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	0028      	movs	r0, r5
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d004      	beq.n	8004b30 <_fflush_r+0x20>
 8004b26:	6a03      	ldr	r3, [r0, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <_fflush_r+0x20>
 8004b2c:	f7ff fa94 	bl	8004058 <__sinit>
 8004b30:	220c      	movs	r2, #12
 8004b32:	5ea3      	ldrsh	r3, [r4, r2]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f1      	beq.n	8004b1c <_fflush_r+0xc>
 8004b38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b3a:	07d2      	lsls	r2, r2, #31
 8004b3c:	d404      	bmi.n	8004b48 <_fflush_r+0x38>
 8004b3e:	059b      	lsls	r3, r3, #22
 8004b40:	d402      	bmi.n	8004b48 <_fflush_r+0x38>
 8004b42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b44:	f7ff fb99 	bl	800427a <__retarget_lock_acquire_recursive>
 8004b48:	0028      	movs	r0, r5
 8004b4a:	0021      	movs	r1, r4
 8004b4c:	f7ff ff5a 	bl	8004a04 <__sflush_r>
 8004b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b52:	0005      	movs	r5, r0
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d4e2      	bmi.n	8004b1e <_fflush_r+0xe>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	059b      	lsls	r3, r3, #22
 8004b5c:	d4df      	bmi.n	8004b1e <_fflush_r+0xe>
 8004b5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b60:	f7ff fb8c 	bl	800427c <__retarget_lock_release_recursive>
 8004b64:	e7db      	b.n	8004b1e <_fflush_r+0xe>

08004b66 <__swbuf_r>:
 8004b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b68:	0006      	movs	r6, r0
 8004b6a:	000d      	movs	r5, r1
 8004b6c:	0014      	movs	r4, r2
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d004      	beq.n	8004b7c <__swbuf_r+0x16>
 8004b72:	6a03      	ldr	r3, [r0, #32]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <__swbuf_r+0x16>
 8004b78:	f7ff fa6e 	bl	8004058 <__sinit>
 8004b7c:	69a3      	ldr	r3, [r4, #24]
 8004b7e:	60a3      	str	r3, [r4, #8]
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	d502      	bpl.n	8004b8c <__swbuf_r+0x26>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <__swbuf_r+0x3a>
 8004b8c:	0021      	movs	r1, r4
 8004b8e:	0030      	movs	r0, r6
 8004b90:	f000 f82c 	bl	8004bec <__swsetup_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d003      	beq.n	8004ba0 <__swbuf_r+0x3a>
 8004b98:	2501      	movs	r5, #1
 8004b9a:	426d      	negs	r5, r5
 8004b9c:	0028      	movs	r0, r5
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	b2ef      	uxtb	r7, r5
 8004ba6:	1ac0      	subs	r0, r0, r3
 8004ba8:	6963      	ldr	r3, [r4, #20]
 8004baa:	b2ed      	uxtb	r5, r5
 8004bac:	4283      	cmp	r3, r0
 8004bae:	dc05      	bgt.n	8004bbc <__swbuf_r+0x56>
 8004bb0:	0021      	movs	r1, r4
 8004bb2:	0030      	movs	r0, r6
 8004bb4:	f7ff ffac 	bl	8004b10 <_fflush_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1ed      	bne.n	8004b98 <__swbuf_r+0x32>
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60a3      	str	r3, [r4, #8]
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	6022      	str	r2, [r4, #0]
 8004bca:	701f      	strb	r7, [r3, #0]
 8004bcc:	6963      	ldr	r3, [r4, #20]
 8004bce:	4283      	cmp	r3, r0
 8004bd0:	d004      	beq.n	8004bdc <__swbuf_r+0x76>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	07db      	lsls	r3, r3, #31
 8004bd6:	d5e1      	bpl.n	8004b9c <__swbuf_r+0x36>
 8004bd8:	2d0a      	cmp	r5, #10
 8004bda:	d1df      	bne.n	8004b9c <__swbuf_r+0x36>
 8004bdc:	0021      	movs	r1, r4
 8004bde:	0030      	movs	r0, r6
 8004be0:	f7ff ff96 	bl	8004b10 <_fflush_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d0d9      	beq.n	8004b9c <__swbuf_r+0x36>
 8004be8:	e7d6      	b.n	8004b98 <__swbuf_r+0x32>
	...

08004bec <__swsetup_r>:
 8004bec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca4 <__swsetup_r+0xb8>)
 8004bee:	b570      	push	{r4, r5, r6, lr}
 8004bf0:	0005      	movs	r5, r0
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	000c      	movs	r4, r1
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d004      	beq.n	8004c04 <__swsetup_r+0x18>
 8004bfa:	6a03      	ldr	r3, [r0, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <__swsetup_r+0x18>
 8004c00:	f7ff fa2a 	bl	8004058 <__sinit>
 8004c04:	220c      	movs	r2, #12
 8004c06:	5ea3      	ldrsh	r3, [r4, r2]
 8004c08:	071a      	lsls	r2, r3, #28
 8004c0a:	d423      	bmi.n	8004c54 <__swsetup_r+0x68>
 8004c0c:	06da      	lsls	r2, r3, #27
 8004c0e:	d407      	bmi.n	8004c20 <__swsetup_r+0x34>
 8004c10:	2209      	movs	r2, #9
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	2240      	movs	r2, #64	@ 0x40
 8004c16:	2001      	movs	r0, #1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	4240      	negs	r0, r0
 8004c1e:	e03a      	b.n	8004c96 <__swsetup_r+0xaa>
 8004c20:	075b      	lsls	r3, r3, #29
 8004c22:	d513      	bpl.n	8004c4c <__swsetup_r+0x60>
 8004c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c26:	2900      	cmp	r1, #0
 8004c28:	d008      	beq.n	8004c3c <__swsetup_r+0x50>
 8004c2a:	0023      	movs	r3, r4
 8004c2c:	3344      	adds	r3, #68	@ 0x44
 8004c2e:	4299      	cmp	r1, r3
 8004c30:	d002      	beq.n	8004c38 <__swsetup_r+0x4c>
 8004c32:	0028      	movs	r0, r5
 8004c34:	f7ff fb2a 	bl	800428c <_free_r>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c3c:	2224      	movs	r2, #36	@ 0x24
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	4393      	bics	r3, r2
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	2300      	movs	r3, #0
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	89a2      	ldrh	r2, [r4, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	6923      	ldr	r3, [r4, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <__swsetup_r+0x86>
 8004c5a:	21a0      	movs	r1, #160	@ 0xa0
 8004c5c:	2280      	movs	r2, #128	@ 0x80
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	0089      	lsls	r1, r1, #2
 8004c62:	0092      	lsls	r2, r2, #2
 8004c64:	400b      	ands	r3, r1
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <__swsetup_r+0x86>
 8004c6a:	0021      	movs	r1, r4
 8004c6c:	0028      	movs	r0, r5
 8004c6e:	f000 f8ad 	bl	8004dcc <__smakebuf_r>
 8004c72:	220c      	movs	r2, #12
 8004c74:	5ea3      	ldrsh	r3, [r4, r2]
 8004c76:	2101      	movs	r1, #1
 8004c78:	001a      	movs	r2, r3
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	420b      	tst	r3, r1
 8004c7e:	d00b      	beq.n	8004c98 <__swsetup_r+0xac>
 8004c80:	2200      	movs	r2, #0
 8004c82:	60a2      	str	r2, [r4, #8]
 8004c84:	6962      	ldr	r2, [r4, #20]
 8004c86:	4252      	negs	r2, r2
 8004c88:	61a2      	str	r2, [r4, #24]
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	6922      	ldr	r2, [r4, #16]
 8004c8e:	4282      	cmp	r2, r0
 8004c90:	d101      	bne.n	8004c96 <__swsetup_r+0xaa>
 8004c92:	061a      	lsls	r2, r3, #24
 8004c94:	d4be      	bmi.n	8004c14 <__swsetup_r+0x28>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	0799      	lsls	r1, r3, #30
 8004c9a:	d400      	bmi.n	8004c9e <__swsetup_r+0xb2>
 8004c9c:	6962      	ldr	r2, [r4, #20]
 8004c9e:	60a2      	str	r2, [r4, #8]
 8004ca0:	e7f3      	b.n	8004c8a <__swsetup_r+0x9e>
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	20002aa8 	.word	0x20002aa8

08004ca8 <_raise_r>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	0004      	movs	r4, r0
 8004cac:	000d      	movs	r5, r1
 8004cae:	291f      	cmp	r1, #31
 8004cb0:	d904      	bls.n	8004cbc <_raise_r+0x14>
 8004cb2:	2316      	movs	r3, #22
 8004cb4:	6003      	str	r3, [r0, #0]
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	4240      	negs	r0, r0
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <_raise_r+0x24>
 8004cc2:	008a      	lsls	r2, r1, #2
 8004cc4:	189b      	adds	r3, r3, r2
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	d108      	bne.n	8004cde <_raise_r+0x36>
 8004ccc:	0020      	movs	r0, r4
 8004cce:	f000 f831 	bl	8004d34 <_getpid_r>
 8004cd2:	002a      	movs	r2, r5
 8004cd4:	0001      	movs	r1, r0
 8004cd6:	0020      	movs	r0, r4
 8004cd8:	f000 f81a 	bl	8004d10 <_kill_r>
 8004cdc:	e7ed      	b.n	8004cba <_raise_r+0x12>
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	d009      	beq.n	8004cf6 <_raise_r+0x4e>
 8004ce2:	1c51      	adds	r1, r2, #1
 8004ce4:	d103      	bne.n	8004cee <_raise_r+0x46>
 8004ce6:	2316      	movs	r3, #22
 8004ce8:	6003      	str	r3, [r0, #0]
 8004cea:	2001      	movs	r0, #1
 8004cec:	e7e5      	b.n	8004cba <_raise_r+0x12>
 8004cee:	2100      	movs	r1, #0
 8004cf0:	0028      	movs	r0, r5
 8004cf2:	6019      	str	r1, [r3, #0]
 8004cf4:	4790      	blx	r2
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e7df      	b.n	8004cba <_raise_r+0x12>
	...

08004cfc <raise>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	4b03      	ldr	r3, [pc, #12]	@ (8004d0c <raise+0x10>)
 8004d00:	0001      	movs	r1, r0
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f7ff ffd0 	bl	8004ca8 <_raise_r>
 8004d08:	bd10      	pop	{r4, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	20002aa8 	.word	0x20002aa8

08004d10 <_kill_r>:
 8004d10:	2300      	movs	r3, #0
 8004d12:	b570      	push	{r4, r5, r6, lr}
 8004d14:	4d06      	ldr	r5, [pc, #24]	@ (8004d30 <_kill_r+0x20>)
 8004d16:	0004      	movs	r4, r0
 8004d18:	0008      	movs	r0, r1
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	f7fc fb5b 	bl	80013d8 <_kill>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d103      	bne.n	8004d2e <_kill_r+0x1e>
 8004d26:	682b      	ldr	r3, [r5, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d000      	beq.n	8004d2e <_kill_r+0x1e>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	2000351c 	.word	0x2000351c

08004d34 <_getpid_r>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	f7fc fb49 	bl	80013cc <_getpid>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <_sbrk_r>:
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	b570      	push	{r4, r5, r6, lr}
 8004d40:	4d06      	ldr	r5, [pc, #24]	@ (8004d5c <_sbrk_r+0x20>)
 8004d42:	0004      	movs	r4, r0
 8004d44:	0008      	movs	r0, r1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	f7fc fbc8 	bl	80014dc <_sbrk>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d103      	bne.n	8004d58 <_sbrk_r+0x1c>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d000      	beq.n	8004d58 <_sbrk_r+0x1c>
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	2000351c 	.word	0x2000351c

08004d60 <memchr>:
 8004d60:	b2c9      	uxtb	r1, r1
 8004d62:	1882      	adds	r2, r0, r2
 8004d64:	4290      	cmp	r0, r2
 8004d66:	d101      	bne.n	8004d6c <memchr+0xc>
 8004d68:	2000      	movs	r0, #0
 8004d6a:	4770      	bx	lr
 8004d6c:	7803      	ldrb	r3, [r0, #0]
 8004d6e:	428b      	cmp	r3, r1
 8004d70:	d0fb      	beq.n	8004d6a <memchr+0xa>
 8004d72:	3001      	adds	r0, #1
 8004d74:	e7f6      	b.n	8004d64 <memchr+0x4>
	...

08004d78 <__swhatbuf_r>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	000e      	movs	r6, r1
 8004d7c:	001d      	movs	r5, r3
 8004d7e:	230e      	movs	r3, #14
 8004d80:	5ec9      	ldrsh	r1, [r1, r3]
 8004d82:	0014      	movs	r4, r2
 8004d84:	b096      	sub	sp, #88	@ 0x58
 8004d86:	2900      	cmp	r1, #0
 8004d88:	da0c      	bge.n	8004da4 <__swhatbuf_r+0x2c>
 8004d8a:	89b2      	ldrh	r2, [r6, #12]
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	0011      	movs	r1, r2
 8004d90:	4019      	ands	r1, r3
 8004d92:	421a      	tst	r2, r3
 8004d94:	d114      	bne.n	8004dc0 <__swhatbuf_r+0x48>
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	6029      	str	r1, [r5, #0]
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	b016      	add	sp, #88	@ 0x58
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	466a      	mov	r2, sp
 8004da6:	f000 f853 	bl	8004e50 <_fstat_r>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	dbed      	blt.n	8004d8a <__swhatbuf_r+0x12>
 8004dae:	23f0      	movs	r3, #240	@ 0xf0
 8004db0:	9901      	ldr	r1, [sp, #4]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	4019      	ands	r1, r3
 8004db6:	4b04      	ldr	r3, [pc, #16]	@ (8004dc8 <__swhatbuf_r+0x50>)
 8004db8:	18c9      	adds	r1, r1, r3
 8004dba:	424b      	negs	r3, r1
 8004dbc:	4159      	adcs	r1, r3
 8004dbe:	e7ea      	b.n	8004d96 <__swhatbuf_r+0x1e>
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	2340      	movs	r3, #64	@ 0x40
 8004dc4:	e7e9      	b.n	8004d9a <__swhatbuf_r+0x22>
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	ffffe000 	.word	0xffffe000

08004dcc <__smakebuf_r>:
 8004dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dce:	2602      	movs	r6, #2
 8004dd0:	898b      	ldrh	r3, [r1, #12]
 8004dd2:	0005      	movs	r5, r0
 8004dd4:	000c      	movs	r4, r1
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	4233      	tst	r3, r6
 8004dda:	d007      	beq.n	8004dec <__smakebuf_r+0x20>
 8004ddc:	0023      	movs	r3, r4
 8004dde:	3347      	adds	r3, #71	@ 0x47
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	2301      	movs	r3, #1
 8004de6:	6163      	str	r3, [r4, #20]
 8004de8:	b005      	add	sp, #20
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dec:	ab03      	add	r3, sp, #12
 8004dee:	aa02      	add	r2, sp, #8
 8004df0:	f7ff ffc2 	bl	8004d78 <__swhatbuf_r>
 8004df4:	9f02      	ldr	r7, [sp, #8]
 8004df6:	9001      	str	r0, [sp, #4]
 8004df8:	0039      	movs	r1, r7
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	f7ff fab2 	bl	8004364 <_malloc_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d108      	bne.n	8004e16 <__smakebuf_r+0x4a>
 8004e04:	220c      	movs	r2, #12
 8004e06:	5ea3      	ldrsh	r3, [r4, r2]
 8004e08:	059a      	lsls	r2, r3, #22
 8004e0a:	d4ed      	bmi.n	8004de8 <__smakebuf_r+0x1c>
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	4393      	bics	r3, r2
 8004e10:	431e      	orrs	r6, r3
 8004e12:	81a6      	strh	r6, [r4, #12]
 8004e14:	e7e2      	b.n	8004ddc <__smakebuf_r+0x10>
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	89a2      	ldrh	r2, [r4, #12]
 8004e1a:	6020      	str	r0, [r4, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	81a3      	strh	r3, [r4, #12]
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	6120      	str	r0, [r4, #16]
 8004e24:	6167      	str	r7, [r4, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <__smakebuf_r+0x78>
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	230e      	movs	r3, #14
 8004e2e:	5ee1      	ldrsh	r1, [r4, r3]
 8004e30:	f000 f820 	bl	8004e74 <_isatty_r>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d005      	beq.n	8004e44 <__smakebuf_r+0x78>
 8004e38:	2303      	movs	r3, #3
 8004e3a:	89a2      	ldrh	r2, [r4, #12]
 8004e3c:	439a      	bics	r2, r3
 8004e3e:	3b02      	subs	r3, #2
 8004e40:	4313      	orrs	r3, r2
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	9a01      	ldr	r2, [sp, #4]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	e7cc      	b.n	8004de8 <__smakebuf_r+0x1c>
	...

08004e50 <_fstat_r>:
 8004e50:	2300      	movs	r3, #0
 8004e52:	b570      	push	{r4, r5, r6, lr}
 8004e54:	4d06      	ldr	r5, [pc, #24]	@ (8004e70 <_fstat_r+0x20>)
 8004e56:	0004      	movs	r4, r0
 8004e58:	0008      	movs	r0, r1
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	f7fc fb1b 	bl	8001498 <_fstat>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d103      	bne.n	8004e6e <_fstat_r+0x1e>
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d000      	beq.n	8004e6e <_fstat_r+0x1e>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	2000351c 	.word	0x2000351c

08004e74 <_isatty_r>:
 8004e74:	2300      	movs	r3, #0
 8004e76:	b570      	push	{r4, r5, r6, lr}
 8004e78:	4d06      	ldr	r5, [pc, #24]	@ (8004e94 <_isatty_r+0x20>)
 8004e7a:	0004      	movs	r4, r0
 8004e7c:	0008      	movs	r0, r1
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	f7fc fb18 	bl	80014b4 <_isatty>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d103      	bne.n	8004e90 <_isatty_r+0x1c>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d000      	beq.n	8004e90 <_isatty_r+0x1c>
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	2000351c 	.word	0x2000351c

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
